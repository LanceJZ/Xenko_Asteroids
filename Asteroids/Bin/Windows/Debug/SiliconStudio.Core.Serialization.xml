<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SiliconStudio.Core.Serialization</name>
    </assembly>
    <members>
        <member name="F:SiliconStudio.Core.IO.DatabaseFileProvider.ObjectIdUrl">
            <summary>
            URL prefix for ObjectId references.
            </summary>
        </member>
        <member name="M:SiliconStudio.Core.IO.DatabaseFileProvider.OpenStream(System.String,SiliconStudio.Core.IO.VirtualFileMode,SiliconStudio.Core.IO.VirtualFileAccess,SiliconStudio.Core.IO.VirtualFileShare,SiliconStudio.Core.IO.StreamFlags)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Core.IO.DatabaseFileProvider.ResolveObjectId(System.String,SiliconStudio.Core.Storage.ObjectId@)">
            <summary>
            Resolves the given VFS URL into a ObjectId and its DatabaseFileProvider.
            </summary>
            <param name="url">The URL to resolve.</param>
            <param name="objectId">The object id.</param>
            <returns>The <see cref="T:SiliconStudio.Core.IO.DatabaseFileProvider"/> containing this object if it could be found; [null] otherwise.</returns>
        </member>
        <member name="T:SiliconStudio.Core.IO.DictionaryStore`2">
            <summary>
            A Key->Value store that will be incrementally saved on the HDD.
            Thread-safe and process-safe.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:SiliconStudio.Core.IO.DictionaryStore`2.GetValues">
            <summary>
            Gets the values stored including unsaved.
            </summary>
            <returns>Values stored including unsaved.</returns>
        </member>
        <member name="M:SiliconStudio.Core.IO.DictionaryStore`2.Contains(`0)">
            <summary>
            Gets or sets the item with the specified key.
            </summary>
            <value>
            The item to get or set.
            </value>
            <param name="key">The key of the item to get or set.</param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="P:SiliconStudio.Core.IO.DictionaryStore`2.Item(`0)">
            <summary>
            Gets or sets the item with the specified key.
            </summary>
            <value>
            The item to get or set.
            </value>
            <param name="key">The key of the item to get or set.</param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:SiliconStudio.Core.IO.DictionaryStore`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value from its key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:SiliconStudio.Core.IO.ListStore`1">
            <summary>
            A value store that will be incrementally saved on HDD.
            Thread-safe and process-safe.
            </summary>
            <typeparam name="T">The type of elements in the store.</typeparam>
        </member>
        <member name="T:SiliconStudio.Core.IO.Store`1">
            <summary>
            A store that will be incrementally saved on the HDD.
            Thread-safe and process-safe.
            </summary>
            <typeparam name="T">The type of elements in the store.</typeparam>
        </member>
        <member name="P:SiliconStudio.Core.IO.Store`1.UseTransaction">
            <summary>
            Gets or sets a flag specifying if the index map changes should be kept aside instead of being committed immediately.
            </summary>
        </member>
        <member name="P:SiliconStudio.Core.IO.Store`1.AutoLoadNewValues">
            <summary>
            Gets or sets a flag specifying if a Save should also load new values that happened in between.
            </summary>
        </member>
        <member name="M:SiliconStudio.Core.IO.Store`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            Waits for pending operation to finish, if any. Note that it does not write pending transaction if <see cref="M:SiliconStudio.Core.IO.Store`1.Save"/> has not been called before.
            </summary>
        </member>
        <member name="M:SiliconStudio.Core.IO.Store`1.AddValues(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds multiple values to the store
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Core.IO.Store`1.AddValue(`0)">
            <summary>
            Adds a value to the store.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Core.IO.Store`1.Save">
            <summary>
            Saves the newly added mapping (only necessary when UseTransaction is set to true).
            </summary>
        </member>
        <member name="M:SiliconStudio.Core.IO.Store`1.Reset">
            <summary>
            Resets the store to an empty state.
            </summary>
        </member>
        <member name="M:SiliconStudio.Core.IO.Store`1.ResetInternal">
            <summary>
            Resets the store to an empty state, to be implemented by subclasses if necessary.
            </summary>
        </member>
        <member name="M:SiliconStudio.Core.IO.Store`1.LoadNewValues">
            <summary>
            Refreshes URL to ObjectId mapping from the latest results in the index file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Core.IO.Store`1.AddUnsaved(`0,System.Int32)">
            <summary>
            Adds a value that has not yet been saved in the store (pending state).
            </summary>
            <param name="item">The item.</param>
            <param name="transaction">The transaction index.</param>
        </member>
        <member name="M:SiliconStudio.Core.IO.Store`1.RemoveUnsaved(`0,System.Int32)">
            <summary>
            Removes a value that has not yet been saved (pending state).
            </summary>
            <param name="item">The item.</param>
            <param name="transaction">The transaction index.</param>
        </member>
        <member name="M:SiliconStudio.Core.IO.Store`1.RemoveUnsaved(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Removes values that have not yet been saved (pending state).
            </summary>
            <param name="items">The items.</param>
            <param name="transaction">The transaction index.</param>
        </member>
        <member name="M:SiliconStudio.Core.IO.Store`1.AddLoaded(`0)">
            <summary>
            Adds a value that has already been saved in the store (saved state).
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:SiliconStudio.Core.IO.Store`1.GetPendingItems(System.Int32)">
            <summary>
            Gets the list of pending items for a given transaction index.
            </summary>
            <param name="transaction">The transaction index.</param>
            <returns></returns>
        </member>
        <member name="T:SiliconStudio.Core.LZ4.LZ4Codec">
            <summary>
            LZ$ codec selecting best implementation depending on platform.
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.LZ4.LZ4Codec.encoder">
            <summary>Encoding service.</summary>
        </member>
        <member name="F:SiliconStudio.Core.LZ4.LZ4Codec.encoderHC">
            <summary>Encoding service for HC algorithm.</summary>
        </member>
        <member name="F:SiliconStudio.Core.LZ4.LZ4Codec.decoder">
            <summary>Decoding service.</summary>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Codec.#cctor">
            <summary>Initializes the <see cref="T:SiliconStudio.Core.LZ4.LZ4Codec"/> class.</summary>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Codec.Try(System.Action)">
            <summary>Tries to execute specified action. Ignores exception if it failed.</summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Codec.Try``1">
            <summary>Tries to create a specified <seealso cref="T:SiliconStudio.Core.LZ4.ILZ4Service"/> and tests it.</summary>
            <typeparam name="T">Concrete <seealso cref="T:SiliconStudio.Core.LZ4.ILZ4Service"/> type.</typeparam>
            <returns>A service if succeeded or <c>null</c> if it failed.</returns>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Codec.AutoTest(SiliconStudio.Core.LZ4.ILZ4Service)">
            <summary>Perofrms the quick auto-test on given compression service.</summary>
            <param name="service">The service.</param>
            <returns>A service or <c>null</c> if it failed.</returns>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Codec.InitializeLZ4Native">
            <summary>Initializes codecs from LZ4 native.</summary>
        </member>
        <member name="P:SiliconStudio.Core.LZ4.LZ4Codec.CodecName">
            <summary>Gets the name of selected codec(s).</summary>
            <value>The name of the codec.</value>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Codec.MaximumOutputLength(System.Int32)">
            <summary>Get maximum output length.</summary>
            <param name="inputLength">Input length.</param>
            <returns>Output length.</returns>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Codec.Encode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Codec.Encode(System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Compressed buffer.</returns>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Codec.EncodeHC(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Codec.EncodeHC(System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Compressed buffer.</returns>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Codec.Decode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>Decodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <param name="knownOutputLength">Set it to <c>true</c> if output length is known.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Codec.Decode(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>Decodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Decompressed buffer.</returns>
        </member>
        <member name="T:SiliconStudio.Core.LZ4.LZ4Stream">
            <summary>Block compression stream. Allows to use LZ4 for stream compression.</summary>
        </member>
        <member name="T:SiliconStudio.Core.LZ4.LZ4Stream.ChunkFlags">
            <summary>
            Flags of a chunk. Please note, this 
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.LZ4.LZ4Stream.ChunkFlags.None">
            <summary>None.</summary>
        </member>
        <member name="F:SiliconStudio.Core.LZ4.LZ4Stream.ChunkFlags.Compressed">
            <summary>Set if chunk is compressed.</summary>
        </member>
        <member name="F:SiliconStudio.Core.LZ4.LZ4Stream.ChunkFlags.HighCompression">
            <summary>Set if high compression has been selected (does not affect decoder, 
            but might be useful when rewriting)</summary>
        </member>
        <member name="F:SiliconStudio.Core.LZ4.LZ4Stream.ChunkFlags.Passes">
            <summary>3 bits for number of passes. Currently only 1 pass (value 0) 
            is supported.</summary>
        </member>
        <member name="F:SiliconStudio.Core.LZ4.LZ4Stream.innerStream">
            <summary>The inner stream.</summary>
        </member>
        <member name="F:SiliconStudio.Core.LZ4.LZ4Stream.compressionMode">
            <summary>The compression mode.</summary>
        </member>
        <member name="F:SiliconStudio.Core.LZ4.LZ4Stream.highCompression">
            <summary>The high compression flag (compression only).</summary>
        </member>
        <member name="F:SiliconStudio.Core.LZ4.LZ4Stream.disposeInnerStream">
            <summary>
            Indicate whether the inner stream should be disposed or not.
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.LZ4.LZ4Stream.blockSize">
            <summary>The block size (compression only).</summary>
        </member>
        <member name="F:SiliconStudio.Core.LZ4.LZ4Stream.dataBuffer">
            <summary>The buffer.</summary>
        </member>
        <member name="F:SiliconStudio.Core.LZ4.LZ4Stream.compressedDataBuffer">
            <summary>The buffer containing the compressed read data</summary>
        </member>
        <member name="F:SiliconStudio.Core.LZ4.LZ4Stream.bufferLength">
            <summary>The buffer length (can be different then _buffer.Length).</summary>
        </member>
        <member name="F:SiliconStudio.Core.LZ4.LZ4Stream.bufferOffset">
            <summary>The offset in a buffer.</summary>
        </member>
        <member name="F:SiliconStudio.Core.LZ4.LZ4Stream.position">
            <summary>
            The position in the not compressed stream.
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.LZ4.LZ4Stream.innerStreamPosition">
            <summary>
            The position in the inner stream.
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.LZ4.LZ4Stream.length">
            <summary>
            The size of the stream after having been uncompressed.
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.LZ4.LZ4Stream.compressedSize">
            <summary>
            The size of the compressed stream.
            </summary>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Stream.#ctor(System.IO.Stream,System.IO.Compression.CompressionMode,System.Boolean,System.Int64,System.Int64,System.Boolean,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:SiliconStudio.Core.LZ4.LZ4Stream" /> class.</summary>
            <param name="innerStream">The inner stream.</param>
            <param name="compressionMode">The compression mode.</param>
            <param name="uncompressedSize">The size of the stream uncompressed</param>
            <param name="highCompression">if set to <c>true</c> [high compression].</param>
            <param name="disposeInnerStream">if set to <c>true</c> <paramref name="innerStream"/> is disposed during called to <see cref="M:SiliconStudio.Core.LZ4.LZ4Stream.Dispose(System.Boolean)"/></param>
            <param name="blockSize">Size of the block.</param>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Stream.NotSupported(System.String)">
            <summary>Returns NotSupportedException.</summary>
            <param name="operationName">Name of the operation.</param>
            <returns>NotSupportedException</returns>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Stream.EndOfStream">
            <summary>Returns EndOfStreamException.</summary>
            <returns>EndOfStreamException</returns>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Stream.TryReadVarInt(System.UInt64@)">
            <summary>Tries to read variable length int.</summary>
            <param name="result">The result.</param>
            <returns><c>true</c> if integer has been read, <c>false</c> if end of stream has been
            encountered. If end of stream has been encoutered in the middle of value 
            <see cref="T:System.IO.EndOfStreamException"/> is thrown.</returns>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Stream.ReadVarInt">
            <summary>Reads the variable length int. Work with assumption that value is in the stream
            and throws exception if it isn't. If you want to check if value is in the stream
            use <see cref="M:SiliconStudio.Core.LZ4.LZ4Stream.TryReadVarInt(System.UInt64@)"/> instead.</summary>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Stream.ReadBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>Reads the block of bytes. 
            Contrary to <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/> does not read partial data if possible. 
            If there is no data (yet) it waits.</summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="count">The length.</param>
            <returns>Number of bytes read.</returns>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Stream.WriteVarInt(System.UInt64)">
            <summary>Writes the variable length integer.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Stream.FlushCurrentChunk">
            <summary>Flushes current chunk.</summary>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Stream.AcquireNextChunk">
            <summary>Reads the next chunk from stream.</summary>
            <returns><c>true</c> if next has been read, or <c>false</c> if it is legitimate end of file.
            Throws <see cref="T:System.IO.EndOfStreamException"/> if end of stream was unexpected.</returns>
        </member>
        <member name="P:SiliconStudio.Core.LZ4.LZ4Stream.CanRead">
            <summary>When overridden in a derived class, gets a value indicating whether the current stream supports reading.</summary>
            <returns>true if the stream supports reading; otherwise, false.</returns>
        </member>
        <member name="P:SiliconStudio.Core.LZ4.LZ4Stream.CanSeek">
            <summary>When overridden in a derived class, gets a value indicating whether the current stream supports seeking.</summary>
            <returns>true if the stream supports seeking; otherwise, false.</returns>
        </member>
        <member name="P:SiliconStudio.Core.LZ4.LZ4Stream.CanWrite">
            <summary>When overridden in a derived class, gets a value indicating whether the current stream supports writing.</summary>
            <returns>true if the stream supports writing; otherwise, false.</returns>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Stream.Flush">
            <summary>When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.</summary>
        </member>
        <member name="P:SiliconStudio.Core.LZ4.LZ4Stream.Length">
            <summary>When overridden in a derived class, gets the length in bytes of the stream.</summary>
            <returns>A long value representing the length of the stream in bytes.</returns>
        </member>
        <member name="P:SiliconStudio.Core.LZ4.LZ4Stream.Position">
            <summary>The position in the uncompressed stream.</summary>
            <returns>The current position within the stream.</returns>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Stream.ReadByte">
            <summary>Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</summary>
            <returns>The unsigned byte cast to an Int32, or -1 if at the end of the stream.</returns>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Stream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Stream.Read(System.IntPtr,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Stream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>When overridden in a derived class, sets the position within the current stream.</summary>
            <param name="offset">A byte offset relative to the <paramref name="origin" /> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Stream.SetLength(System.Int64)">
            <summary>When overridden in a derived class, sets the length of the current stream.</summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Stream.WriteByte(System.Byte)">
            <summary>Writes a byte to the current position in the stream and advances the position within the stream by one byte.</summary>
            <param name="value">The byte to write to the stream.</param>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Stream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count" /> bytes from <paramref name="buffer" /> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Stream.Write(System.IntPtr,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Stream.Reset">
            <summary>
            Reset the stream to its initial position and state
            </summary>
        </member>
        <member name="M:SiliconStudio.Core.LZ4.LZ4Stream.Dispose(System.Boolean)">
            <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.Stream" /> and optionally releases the managed resources.</summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:SiliconStudio.Core.Reflection.IdentifiableHelper">
            <summary>
            An helper class to attach a unique identifier object to runtime objects.
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.Reflection.IdentifiableHelper.YamlSpecialId">
            <summary>
            Special member id used to serialize attached id to an object.
            </summary>
        </member>
        <member name="T:SiliconStudio.Core.Reflection.ShadowObject">
            <summary>
            Allows to attach dynamic properties to an object at runtime. Note that in order to use this object at runtime, you need to set to <c>true</c> the <see cref="P:SiliconStudio.Core.Reflection.ShadowObject.Enable"/> property.
            </summary>
        </member>
        <member name="P:SiliconStudio.Core.Reflection.ShadowObject.IsSelected">
            <summary>
            Gets or sets a boolean indicating whether this object is selected by an editor.
            </summary>
        </member>
        <member name="P:SiliconStudio.Core.Reflection.ShadowObject.IsHover">
            <summary>
            Gets or sets a boolean indicating whether this object is being mouse hovered from an editor.
            </summary>
        </member>
        <member name="P:SiliconStudio.Core.Reflection.ShadowObject.Enable">
            <summary>
            Gets or sets a boolean to enable or disable shadow object. 
            </summary>
            <remarks>
            When disabled, method <see cref="M:SiliconStudio.Core.Reflection.ShadowObject.Get(System.Object)"/> or <see cref="M:SiliconStudio.Core.Reflection.ShadowObject.GetOrCreate(System.Object)"/>
            </remarks>
        </member>
        <member name="M:SiliconStudio.Core.Reflection.ShadowObject.IsObjectSelected(System.Object)">
            <summary>
            Checks if the following object instance is selected by an editor.
            </summary>
            <param name="instance">A live object instance</param>
            <returns><c>true</c> if the object is selected, false otherwise</returns>
        </member>
        <member name="M:SiliconStudio.Core.Reflection.ShadowObject.IsObjectHover(System.Object)">
            <summary>
            Checks if the following object instance is being mouse hovered from an editor.
            </summary>
            <param name="instance">A live object instance</param>
            <returns><c>true</c> if the object is selected, false otherwise</returns>
        </member>
        <member name="M:SiliconStudio.Core.Reflection.ShadowObject.TryGet(System.Object,SiliconStudio.Core.Reflection.ShadowObject@)">
            <summary>
            Tries to get the <see cref="T:SiliconStudio.Core.Reflection.ShadowObject"/> instance associated.
            </summary>
            <param name="instance">The live instance</param>
            <param name="shadow">The shadow object</param>
            <returns><c>true</c> if the shadow object was found, <c>false</c> otherwise</returns>
        </member>
        <member name="M:SiliconStudio.Core.Reflection.ShadowObject.Get(System.Object)">
            <summary>
            Gets the <see cref="T:SiliconStudio.Core.Reflection.ShadowObject"/> instance if it exists or <c>null</c> otherwise.
            </summary>
            <param name="instance">The live instance.</param>
            <returns>The shadow instance or <c>null</c> if none</returns>
        </member>
        <member name="M:SiliconStudio.Core.Reflection.ShadowObject.GetOrCreate(System.Object)">
            <summary>
            Gets the <see cref="T:SiliconStudio.Core.Reflection.ShadowObject"/> instance. Creates it if it does not exist.
            </summary>
            <param name="instance">The live instance.</param>
            <returns>The shadow instance</returns>
        </member>
        <member name="M:SiliconStudio.Core.Reflection.ShadowObject.Copy(System.Object,System.Object)">
            <summary>
            Copies all dynamic properties from an instance to another instance.
            </summary>
            <param name="fromInstance">The instance to copy the shadow attributes from</param>
            <param name="toInstance">The instance to copy the shadow attributes to</param>
        </member>
        <member name="T:SiliconStudio.Core.Reflection.ShadowObjectPropertyKey">
            <summary>
            A key used to attach/retrieve property values from a <see cref="T:SiliconStudio.Core.Reflection.ShadowObject"/>
            </summary>
            <remarks>
            This key allow to associate two pseudo-keys together.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Core.Reflection.ShadowObjectPropertyKey.#ctor(System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:SiliconStudio.Core.Reflection.ShadowObjectPropertyKey"/>
            </summary>
            <param name="item1">The first part of this key. Cannot be null</param>
        </member>
        <member name="M:SiliconStudio.Core.Reflection.ShadowObjectPropertyKey.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:SiliconStudio.Core.Reflection.ShadowObjectPropertyKey"/>
            </summary>
            <param name="item1">The first part of this key. Cannot be null</param>
            <param name="item2">The second part of this key. Can be null</param>
        </member>
        <member name="F:SiliconStudio.Core.Reflection.ShadowObjectPropertyKey.Item1">
            <summary>
            First part of this key.
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.Reflection.ShadowObjectPropertyKey.Item2">
            <summary>
            Second part of this key.
            </summary>
        </member>
        <member name="T:SiliconStudio.Core.Serialization.Assets.ContentManager">
            <summary>
            Loads and saves assets.
            </summary>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Assets.ContentManager.IncrementReference(SiliconStudio.Core.Serialization.Assets.ContentManager.AssetReference,System.Boolean)">
            <summary>
            Increments reference count of an <see cref="T:SiliconStudio.Core.Serialization.Assets.ContentManager.AssetReference"/>.
            </summary>
            <param name="assetReference"></param>
            <param name="publicReference"></param>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Assets.ContentManager.DecrementReference(SiliconStudio.Core.Serialization.Assets.ContentManager.AssetReference,System.Boolean)">
            <summary>
            Decrements reference count of an <see cref="T:SiliconStudio.Core.Serialization.Assets.ContentManager.AssetReference"/>.
            </summary>
            <param name="assetReference"></param>
            <param name="publicReference"></param>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Assets.ContentManager.ReleaseAsset(SiliconStudio.Core.Serialization.Assets.ContentManager.AssetReference)">
            <summary>
            Releases an asset.
            </summary>
            <param name="assetReference">The asset reference.</param>
        </member>
        <member name="T:SiliconStudio.Core.Serialization.Assets.ContentManager.AssetReference">
            <summary>
            Internal object that represents a loaded asset, with its url and reference counts.
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.Serialization.Assets.ContentManager.AssetReference.Next">
            <summary>
            The next item in the linked list.
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.Serialization.Assets.ContentManager.AssetReference.Prev">
            <summary>
            The next item in the linked list.
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.Serialization.Assets.ContentManager.AssetReference.Object">
            <summary>
            The object being referenced.
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.Serialization.Assets.ContentManager.AssetReference.Url">
            <summary>
            The URL.
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.Serialization.Assets.ContentManager.AssetReference.PublicReferenceCount">
            <summary>
            The public reference count (corresponding to ContentManager.Load/Unload).
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.Serialization.Assets.ContentManager.AssetReference.PrivateReferenceCount">
            <summary>
            The private reference count (corresponding to an object being referenced indirectly by other loaded objects).
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.Serialization.Assets.ContentManager.LoadedAssetUrls">
            <summary>
            A dictionary mapping, for each loaded object, its url to the corresponding instance of <see cref="T:SiliconStudio.Core.Serialization.Assets.ContentManager.AssetReference"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.Serialization.Assets.ContentManager.LoadedAssetReferences">
            <summary>
            A dictionary mapping, for each loaded object, the corresponding instance of <see cref="T:SiliconStudio.Core.Serialization.Assets.ContentManager.AssetReference"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Assets.ContentManager.Save(System.String,System.Object)">
            <summary>
            Saves an asset at a specific URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="asset">The asset.</param>
            <exception cref="T:System.ArgumentNullException">
            url
            or
            asset
            </exception>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Assets.ContentManager.Exists(System.String)">
            <summary>
            Check if the specified asset exists.
            </summary>
            <param name="url">The URL.</param>
            <returns>
              <c>true</c> if the specified asset url exists, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Assets.ContentManager.Load``1(System.String,SiliconStudio.Core.Serialization.Assets.AssetManagerLoaderSettings)">
            <summary>
            Loads an asset from the specified URL.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="url">The URL to load from.</param>
            <param name="settings">The settings. If null, fallback to <see cref="P:SiliconStudio.Core.Serialization.Assets.AssetManagerLoaderSettings.Default" />.</param>
            <remarks>If the asset is already loaded, it just increases the reference count of the asset and return the same instance.</remarks>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Assets.ContentManager.Load(System.Type,System.String,SiliconStudio.Core.Serialization.Assets.AssetManagerLoaderSettings)">
            <summary>
            Loads an asset from the specified URL.
            </summary>
            <param name="type">The type.</param>
            <param name="url">The URL.</param>
            <param name="settings">The settings.</param>
            <returns></returns>
            <remarks>If the asset is already loaded, it just increases the reference count of the asset and return the same instance.</remarks>
            <exception cref="T:System.ArgumentNullException">url</exception>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Assets.ContentManager.Reload(System.Object,SiliconStudio.Core.Serialization.Assets.AssetManagerLoaderSettings)">
            <summary>
            Reloads an asset. If possible, same recursively referenced objects are reused.
            </summary>
            <param name="obj">The object.</param>
            <param name="settings">The settings.</param>
            <returns>True if it could be reloaded, false otherwise.</returns>
            <exception cref="T:System.InvalidOperationException">Content not loaded through this ContentManager.</exception>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Assets.ContentManager.LoadAsync``1(System.String,SiliconStudio.Core.Serialization.Assets.AssetManagerLoaderSettings)">
            <summary>
            Loads an asset from the specified URL asynchronously.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="url">The URL to load from.</param>
            <param name="settings">The settings. If null, fallback to <see cref="P:SiliconStudio.Core.Serialization.Assets.AssetManagerLoaderSettings.Default" />.</param>
            <remarks>If the asset is already loaded, it just increases the reference count of the asset and return the same instance.</remarks>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Assets.ContentManager.LoadAsync(System.Type,System.String,SiliconStudio.Core.Serialization.Assets.AssetManagerLoaderSettings)">
            <summary>
            Loads an asset from the specified URL asynchronously.
            </summary>
            <param name="type">The type.</param>
            <param name="url">The URL.</param>
            <param name="settings">The settings.</param>
            <remarks>If the asset is already loaded, it just increases the reference count of the asset and return the same instance.</remarks>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Assets.ContentManager.Get``1(System.String)">
            <summary>
            Gets a previously loaded asset from its URL.
            </summary>
            <typeparam name="T">The type of asset to retrieve.</typeparam>
            <param name="url">The URL of the asset to retrieve.</param>
            <returns>The loaded asset, or <c>null</c> if the asset has not been loaded.</returns>
            <remarks>This function does not increase the reference count on the asset.</remarks>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Assets.ContentManager.Get(System.Type,System.String)">
            <summary>
            Gets a previously loaded asset from its URL.
            </summary>
            <param name="type">The type of asset to retrieve.</param>
            <param name="url">The URL of the asset to retrieve.</param>
            <returns>The loaded asset, or <c>null</c> if the asset has not been loaded.</returns>
            <remarks>This function does not increase the reference count on the asset.</remarks>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Assets.ContentManager.IsLoaded(System.String,System.Boolean)">
            <summary>
            Gets or sets whether an asset with the given URL is currently loaded.
            </summary>
            <param name="url">The URL to check.</param>
            <param name="loadedManuallyOnly">If <c>true</c>, this method will return true only if an asset with the given URL has been manually loaded via <see cref="M:SiliconStudio.Core.Serialization.Assets.ContentManager.Load(System.Type,System.String,SiliconStudio.Core.Serialization.Assets.AssetManagerLoaderSettings)"/>, and not if the asset has been only loaded indirectly from another asset.</param>
            <returns><c>True</c> if an asset with the given URL is currently loaded, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Assets.ContentManager.Unload(System.Object)">
            <summary>
            Unloads the specified asset.
            </summary>
            <param name="obj">The object to unload.</param>
            <exception cref="T:System.InvalidOperationException">Content not loaded through this ContentManager.</exception>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Assets.ContentManager.Unload(System.String)">
            <summary>
            Unloads the asset at the specified URL.
            </summary>
            <param name="url">The URL.</param>
            <exception cref="T:System.InvalidOperationException">Content not loaded through this ContentManager.</exception>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Assets.ContentManager.GetStats">
            <summary>
            Computes statistics about the assets that are currently loaded. This method is intended to be used for debug purpose only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Assets.ContentManager.SetAssetObject(SiliconStudio.Core.Serialization.Assets.ContentManager.AssetReference,System.Object)">
            <summary>
            Sets AssetReference.Object, and updates loadedAssetByUrl collection.
            </summary>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Assets.ContentManager.HandleAssetNotFound(System.String)">
            <summary>
            Notify debugger and logging when an asset could not be found.
            </summary>
            <param name="url">The URL.</param>
            <exception cref="T:SiliconStudio.Core.Serialization.Assets.AssetManagerException"></exception>
        </member>
        <member name="T:SiliconStudio.Core.Serialization.Assets.AssetManagerException">
            <summary>
            A subtype of <see cref="T:System.Exception"/> thrown by the <see cref="T:SiliconStudio.Core.Serialization.Assets.ContentManager"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Core.Serialization.Assets.AssetManagerLoaderSettings">
            <summary>
            Specifies settings for <see cref="M:SiliconStudio.Core.Serialization.Assets.ContentManager.Load``1(System.String,SiliconStudio.Core.Serialization.Assets.AssetManagerLoaderSettings)"/> operations.
            </summary>
        </member>
        <member name="P:SiliconStudio.Core.Serialization.Assets.AssetManagerLoaderSettings.Default">
            <summary>
            Gets the default loader settings.
            </summary>
            <value>
            The default loader settings.
            </value>
        </member>
        <member name="P:SiliconStudio.Core.Serialization.Assets.AssetManagerLoaderSettings.IgnoreReferences">
            <summary>
            Gets the loader settings which doesn't load content references.
            </summary>
            <value>
            The loader settings which doesn't load content references.
            </value>
        </member>
        <member name="P:SiliconStudio.Core.Serialization.Assets.AssetManagerLoaderSettings.LoadContentReferences">
            <summary>
            Gets or sets a value indicating whether <see cref="T:SiliconStudio.Core.Serialization.IReference"/> should be loaded.
            </summary>
            <value>
              <c>true</c> if <see cref="T:SiliconStudio.Core.Serialization.IReference"/> should be loaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SiliconStudio.Core.Serialization.Assets.AssetManagerLoaderSettings.ContentFilter">
            <summary>
            Gets or sets a filter that can indicate whether <see cref="T:SiliconStudio.Core.Serialization.IReference"/> should be loaded.
            </summary>
            <value>
            The content reference filter.
            </value>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Assets.AssetManagerLoaderSettings.NewContentFilterByType(System.Type[])">
            <summary>
            Creates a new content filter that won't load chunk if not one of the given types.
            </summary>
            <param name="types">The accepted types.</param>
            <returns></returns>
        </member>
        <member name="T:SiliconStudio.Core.Serialization.Assets.AssetManagerStats">
            <summary>
            A class representing stats computed for an instance of <see cref="T:SiliconStudio.Core.Serialization.Assets.ContentManager"/> at a given time. This class
            is intended to be used for debug purpose only.
            </summary>
        </member>
        <member name="T:SiliconStudio.Core.Serialization.Assets.AssetManagerStats.LoadedAsset">
            <summary>
            A class representing information on a single loaded asset. This class is intended to be used for debug purpose only.
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.Serialization.Assets.AssetManagerStats.LoadedAsset.Url">
            <summary>
            The url of the loaded asset.
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.Serialization.Assets.AssetManagerStats.LoadedAsset.PublicReferenceCount">
            <summary>
            The public reference count, corresponding to the number of times this asset has been manually loaded.
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.Serialization.Assets.AssetManagerStats.LoadedAsset.PrivateReferenceCount">
            <summary>
            The private reference count, corresponding to the number of times this asset has been loaded indirectly because it is referenced by another asset.
            </summary>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Assets.AssetManagerStats.LoadedAsset.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Core.Serialization.Assets.AssetManagerStats.LoadedAsset"/> class.
            </summary>
            <param name="url">The url of the asset.</param>
            <param name="publicReferenceCount">The public reference count.</param>
            <param name="privateReferenceCount">The private reference count.</param>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Assets.AssetManagerStats.#ctor(System.Collections.Generic.IEnumerable{SiliconStudio.Core.Serialization.Assets.ContentManager.AssetReference})">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Core.Serialization.Assets.AssetManagerStats"/> class.
            </summary>
            <param name="assetReferences">The collection of <see cref="T:SiliconStudio.Core.Serialization.Assets.ContentManager.AssetReference"/> representing the currently loaded assets.</param>
        </member>
        <member name="P:SiliconStudio.Core.Serialization.Assets.AssetManagerStats.LoadedAssets">
            <summary>
            Gets a collection representing information on all currently loaded assets.
            </summary>
        </member>
        <member name="T:SiliconStudio.Core.Serialization.Assets.ContentProfilingKeys">
            <summary>
            Keys used for profiling the game class.
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.Serialization.Assets.ContentProfilingKeys.ContentLoad">
            <summary>
            Profiling load of an asset.
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.Serialization.Assets.ContentProfilingKeys.ContentReload">
            <summary>
            Profiling load of an asset.
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.Serialization.Assets.ContentProfilingKeys.ContentSave">
            <summary>
            Profiling save of an asset.
            </summary>
        </member>
        <member name="T:SiliconStudio.Core.Serialization.Assets.NamespaceDoc">
            <summary>
            The <see cref="N:SiliconStudio.Core.Serialization.Assets"/> namespace contains high-level asset management classes.
            </summary>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Assets.AssetSerializer.RegisterSerializer(SiliconStudio.Core.Serialization.Contents.IContentSerializer)">
            <summary>
            Registers a serializer with this AssetSerializer.
            </summary>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="T:SiliconStudio.Core.Serialization.Assets.ChunkHeader">
            <summary>
            This class describes the header of an asset serialized in a blob file. Its (serialized) size has to remain constant
            </summary>
        </member>
        <member name="T:SiliconStudio.Core.Serialization.Assets.IAssetManager">
            <summary>
            Interface of the asset manager.
            </summary>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Assets.IAssetManager.Exists(System.String)">
            <summary>
            Check if the specified asset url exists.
            </summary>
            <param name="url">The URL.</param>
            <returns><c>true</c> if the specified asset url exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Assets.IAssetManager.OpenAsStream(System.String,SiliconStudio.Core.IO.StreamFlags)">
            <summary>
            Opens the specified URL as a stream used for custom raw asset loading.
            </summary>
            <param name="url">The URL to the raw asset.</param>
            <param name="streamFlags">The type of stream needed</param>
            <returns>A stream to the raw asset.</returns>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Assets.IAssetManager.Load``1(System.String,SiliconStudio.Core.Serialization.Assets.AssetManagerLoaderSettings)">
            <summary>
            Loads content from the specified URL.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="url">The URL to load from.</param>
            <param name="settings">The settings. If null, fallback to <see cref="P:SiliconStudio.Core.Serialization.Assets.AssetManagerLoaderSettings.Default"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Assets.IAssetManager.LoadAsync``1(System.String,SiliconStudio.Core.Serialization.Assets.AssetManagerLoaderSettings)">
            <summary>
            Loads content from the specified URL asynchronously.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="url">The URL to load from.</param>
            <param name="settings">The settings. If null, fallback to <see cref="P:SiliconStudio.Core.Serialization.Assets.AssetManagerLoaderSettings.Default"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Assets.IAssetManager.Unload(System.Object)">
            <summary>
            Unloads the specified object.
            </summary>
            <param name="obj">The object to unload.</param>
        </member>
        <member name="P:SiliconStudio.Core.Serialization.Assets.IAssetManager.Serializer">
            <summary>
            Gets the serializer.
            </summary>
            <value>The serializer.</value>
        </member>
        <member name="F:SiliconStudio.Core.Serialization.Assets.UrlType.File">
            <summary>
            The location is a file on the disk
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.Serialization.Assets.UrlType.ContentLink">
            <summary>
            The location is a IReference just used as a link
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.Serialization.Assets.UrlType.Content">
            <summary>
            The location is a IReference and the content is used by the command
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.Serialization.Assets.UrlType.Virtual">
            <summary>
            TODO: Is it something still used?
            </summary>
        </member>
        <member name="T:SiliconStudio.Core.Serialization.Contents.DataContentSerializerWithReuse`1">
            <summary>
            ContentSerializer that simply defers serialization to low level serialization, with <see cref="P:SiliconStudio.Core.Serialization.SerializerSelector.ReuseReferences"/> set to true.
            </summary>
            <typeparam name="T">The type to serialize.</typeparam>
        </member>
        <member name="T:SiliconStudio.Core.Serialization.Contents.NamespaceDoc">
            <summary>
            The <see cref="N:SiliconStudio.Core.Serialization.Contents"/> namespace contains types for high-level content management, to be used by the <see cref="T:SiliconStudio.Core.Serialization.Assets.ContentManager"/>
            </summary>
        </member>
        <member name="T:SiliconStudio.Core.Serialization.Contents.ChunkReference">
            <summary>
            Describe a reference between an object and another.
            </summary>
            <remarks>This class is IEquatable, and equality is true if and only if Location and ObjType properties match</remarks>
        </member>
        <member name="T:SiliconStudio.Core.Serialization.Contents.ContentSerializerAttribute">
            <summary>
            Allows customization of IContentSerializer through an attribute.
            </summary>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Contents.ContentSerializerAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Core.Serialization.Contents.ContentSerializerAttribute"/> class.
            </summary>
            <param name="contentSerializerType">Type of the content serializer.</param>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Contents.ContentSerializerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Core.Serialization.Contents.ContentSerializerAttribute"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Core.Serialization.Contents.ContentSerializerAttribute.ContentSerializerType">
            <summary>
            Gets the type of the content serializer.
            </summary>
            <value>
            The type of the content serializer.
            </value>
        </member>
        <member name="T:SiliconStudio.Core.Serialization.Contents.ContentSerializerBase`1">
            <summary>
            Base class for Content Serializer with empty virtual implementation.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:SiliconStudio.Core.Serialization.Contents.ContentSerializerBase`1.SerializationType">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Core.Serialization.Contents.ContentSerializerBase`1.ActualType">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Contents.ContentSerializerBase`1.Construct(SiliconStudio.Core.Serialization.Contents.ContentSerializerContext)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Contents.ContentSerializerBase`1.Serialize(SiliconStudio.Core.Serialization.Contents.ContentSerializerContext,SiliconStudio.Core.Serialization.SerializationStream,`0)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Contents.ContentSerializerBase`1.Serialize(SiliconStudio.Core.Serialization.Contents.ContentSerializerContext,SiliconStudio.Core.Serialization.SerializationStream,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Core.Serialization.Contents.DataContentSerializer`1">
            <summary>
            ContentSerializer that simply defers serialization to low level serialization.
            </summary>
            <typeparam name="T">The type to serialize.</typeparam>
        </member>
        <member name="T:SiliconStudio.Core.Serialization.Contents.IContentSerializer">
            <summary>
            Serializer for high-level "chunk", used by <see cref="T:SiliconStudio.Core.Serialization.Assets.ContentManager"/>.
            </summary>
        </member>
        <member name="P:SiliconStudio.Core.Serialization.Contents.IContentSerializer.SerializationType">
            <summary>
            Gets the type stored on HDD. Usually matches <see cref="P:SiliconStudio.Core.Serialization.Contents.IContentSerializer.ActualType"/>, but sometimes it might be converted to a different format (i.e. a GPU Texture is saved as an Image).
            </summary>
            <value>
            The type stored on HDD.
            </value>
        </member>
        <member name="P:SiliconStudio.Core.Serialization.Contents.IContentSerializer.ActualType">
            <summary>
            Gets the actual runtime type of object being serialized by <see cref="M:SiliconStudio.Core.Serialization.Contents.IContentSerializer.Serialize(SiliconStudio.Core.Serialization.Contents.ContentSerializerContext,SiliconStudio.Core.Serialization.SerializationStream,System.Object)"/>. It could be different than <see cref="P:SiliconStudio.Core.Serialization.Contents.IContentSerializer.SerializationType"/> if a conversion happened.
            </summary>
            <value>
            The actual type.
            </value>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Contents.IContentSerializer.Serialize(SiliconStudio.Core.Serialization.Contents.ContentSerializerContext,SiliconStudio.Core.Serialization.SerializationStream,System.Object)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="context">The context.</param>
            <param name="stream">The stream.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.Contents.IContentSerializer.Construct(SiliconStudio.Core.Serialization.Contents.ContentSerializerContext)">
            <summary>
            Constructs the specified object. This is useful if there is any cycle in the object graph reference.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:SiliconStudio.Core.Serialization.Contents.IContentSerializer`1">
            <summary>
            A <see cref="T:SiliconStudio.Core.Serialization.Contents.IContentSerializer"/> with a specific runtime type.
            </summary>
            <typeparam name="T">Runtime type being serialized. Expected to match <see cref="P:SiliconStudio.Core.Serialization.Contents.IContentSerializer.ActualType"/></typeparam>
        </member>
        <member name="F:SiliconStudio.Core.Serialization.ContentReferenceState.NeverLoad">
            <summary>
            Never try to load the data reference.
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.Serialization.ContentReferenceState.Loaded">
            <summary>
            Data reference has already been loaded.
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.Serialization.ContentReferenceState.Modified">
            <summary>
            Data reference has been set to a new value by the user.
            It will be changed to <see cref="F:SiliconStudio.Core.Serialization.ContentReferenceState.Loaded"/> as soon as it has been written by the <see cref="T:SiliconStudio.Core.Serialization.Assets.ContentManager"/>.
            </summary>
        </member>
        <member name="P:SiliconStudio.Core.Serialization.ContentReference.Location">
            <summary>
            Gets or sets the location of the referenced content.
            </summary>
            <value>
            The location of the referenced content.
            </value>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.ContentReference`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Core.Serialization.ContentReference"/> class with the given value.
            </summary>
            <param name="value">The value of the referenced conten.t</param>
            <remarks>This constructor should be used during serialization.</remarks>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.ContentReference`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Core.Serialization.ContentReference"/> class with the given id and location.
            </summary>
            <param name="location">The location of the referenced content.</param>
            <remarks>This constructor should be used during deserialization.</remarks>
        </member>
        <member name="P:SiliconStudio.Core.Serialization.ContentReference`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
            <exception cref="T:System.InvalidOperationException">Value can't be read in this state.</exception>
        </member>
        <member name="T:SiliconStudio.Core.Serialization.IContentData">
            <summary>
            A content data storing its own Location.
            </summary>
        </member>
        <member name="T:SiliconStudio.Core.Serialization.IReference">
            <summary>
            An interface that provides a reference to an object identified by a <see cref="T:System.Guid"/> and a location.
            </summary>
        </member>
        <member name="P:SiliconStudio.Core.Serialization.IReference.Id">
            <summary>
            Gets the asset unique identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:SiliconStudio.Core.Serialization.IReference.Location">
            <summary>
            Gets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="T:SiliconStudio.Core.Serialization.ITypedReference">
            <summary>
            A typed <see cref="T:SiliconStudio.Core.Serialization.IReference"/>
            </summary>
        </member>
        <member name="P:SiliconStudio.Core.Serialization.ITypedReference.Type">
            <summary>
            Gets the type of this content reference.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:SiliconStudio.Core.Serialization.AttachedReference">
            <summary>
            Stores the object reference information, so that it is easy to work on partially loaded or CPU version of assets with <see cref="T:SiliconStudio.Core.Serialization.Assets.ContentManager"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.Serialization.AttachedReference.Url">
            <summary>
            The asset URL of the referenced data.
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.Serialization.AttachedReference.Id">
            <summary>
            The asset unique identifier.
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.Serialization.AttachedReference.IsProxy">
            <summary>
            If yes, this object won't be recursively saved in a separate chunk by <see cref="T:SiliconStudio.Core.Serialization.Assets.ContentManager"/>.
            Use this if you only care about the Url reference.
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.Serialization.AttachedReference.Data">
            <summary>
            Data representation (useful if your object is a GPU object but you want to manipulate a CPU version of it).
            This needs to be manually interpreted by a custom <see cref="T:SiliconStudio.Core.Serialization.DataSerializer`1"/> implementation.
            </summary>
        </member>
        <member name="T:SiliconStudio.Core.Serialization.AttachedReferenceManager">
            <summary>
            Manage object reference information externally, not stored in the object but in a separate <see cref="T:SiliconStudio.Core.Serialization.AttachedReference"/> object.
            </summary>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.AttachedReferenceManager.GetUrl(System.Object)">
            <summary>
            Gets the URL of a given object.
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.AttachedReferenceManager.SetUrl(System.Object,System.String)">
            <summary>
            Sets the URL of a given object.
            </summary>
            <param name="obj">The object.</param>
            <param name="url">The URL.</param>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.AttachedReferenceManager.GetAttachedReference(System.Object)">
            <summary>
            Gets the reference info of attached to a given object, if it exists.
            </summary>
            <param name="obj">The object for which to get the attached reference. Can be null, in this case this method returns null.</param>
            <returns>The <see cref="T:SiliconStudio.Core.Serialization.AttachedReference"/> attached to the given object if available, <c>null</c> otherwise.</returns>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.AttachedReferenceManager.GetOrCreateAttachedReference(System.Object)">
            <summary>
            Gets or creates the object reference info of a given object.
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.AttachedReferenceManager.CreateProxyObject``1(SiliconStudio.Core.Serialization.IReference)">
            <summary>
            Creates a proxy object with <see cref="T:SiliconStudio.Core.Serialization.AttachedReference" /> designing it as a proxy with a given id and location (that can be used with <see cref="T:SiliconStudio.Core.Serialization.Assets.ContentManager" />). This allows to construct and save object references without actually loading them.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reference">The content reference.</param>
            <returns>T.</returns>
            <exception cref="T:System.ArgumentNullException">reference</exception>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.AttachedReferenceManager.CreateProxyObject``1(System.Guid,System.String)">
            <summary>
            Creates a proxy object with <see cref="T:SiliconStudio.Core.Serialization.AttachedReference"/> designing it as a proxy with a given id and location (that can be used with <see cref="T:SiliconStudio.Core.Serialization.Assets.ContentManager"/>). This allows to construct and save object references without actually loading them.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The identifier.</param>
            <param name="location">The location.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.AttachedReferenceManager.CreateProxyObject(System.Type,System.Guid,System.String)">
            <summary>
            Creates a proxy object with <see cref="T:SiliconStudio.Core.Serialization.AttachedReference"/> designing it as a proxy with a given id and location (that can be used with <see cref="T:SiliconStudio.Core.Serialization.Assets.ContentManager"/>). This allows to construct and save object references without actually loading them.
            </summary>
            <param name="type">The type.</param>
            <param name="id">The identifier.</param>
            <param name="location">The location.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Core.Serialization.ReferenceSerializer.IsReferenceType(System.Type)">
            <summary>
            Determines whether the type has a <see cref="T:SiliconStudio.Core.Serialization.ReferenceSerializer`1"/>.
            </summary>
            <param name="type"></param>
            <returns>True if <see cref="!:type"/> has a <see cref="T:SiliconStudio.Core.Serialization.ReferenceSerializer`1"/>, false otherwise</returns>
        </member>
        <member name="T:SiliconStudio.Core.Serialization.IReferenceSerializer">
            <summary>
            Used to detect whether a serializer is a reference serializer.
            </summary>
        </member>
        <member name="T:SiliconStudio.Core.Serialization.ReferenceSerializer`1">
            <summary>0
            Serialize object with its underlying Id and Location, and use <see cref="T:SiliconStudio.Core.Serialization.Assets.ContentManager"/> to generate a separate chunk.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SiliconStudio.Core.Storage.Blob">
            <summary>
            Stores immutable binary content.
            </summary>
        </member>
        <member name="P:SiliconStudio.Core.Storage.Blob.Size">
            <summary>
            Gets the size.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="P:SiliconStudio.Core.Storage.Blob.Content">
            <summary>
            Gets the content.
            </summary>
            <value>
            The content.
            </value>
        </member>
        <member name="P:SiliconStudio.Core.Storage.Blob.ObjectId">
            <summary>
            Gets the <see cref="P:SiliconStudio.Core.Storage.Blob.ObjectId"/>.
            </summary>
            <value>
            The <see cref="P:SiliconStudio.Core.Storage.Blob.ObjectId"/>.
            </value>
        </member>
        <member name="M:SiliconStudio.Core.Storage.Blob.GetContentStream">
            <summary>
            Gets a <see cref="T:SiliconStudio.Core.IO.NativeStream"/> over the <see cref="P:SiliconStudio.Core.Storage.Blob.Content"/>.
            </summary>
            It will keeps a reference to the <see cref="T:SiliconStudio.Core.Storage.Blob"/> until disposed.
            <returns>A <see cref="T:SiliconStudio.Core.IO.NativeStream"/> over the <see cref="P:SiliconStudio.Core.Storage.Blob.Content"/>.</returns>
        </member>
        <member name="M:SiliconStudio.Core.Storage.Blob.Destroy">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Core.Storage.BlobStream">
            <summary>
            A read-only <see cref="T:SiliconStudio.Core.IO.NativeMemoryStream"/> that will properly keep references on its underlying <see cref="T:SiliconStudio.Core.Storage.Blob"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Core.Storage.BlobStream.WriteByte(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Core.Storage.BlobStream.Write(System.IntPtr,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Core.Storage.BlobStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Core.Storage.BlobStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Core.Storage.BundleDescription">
            <summary>
            Description of a bundle: header, dependencies, objects and assets.
            </summary>
        </member>
        <member name="T:SiliconStudio.Core.Storage.FileOdbBackend">
            <summary>
            Object Database Backend (ODB) implementation using <see cref="T:SiliconStudio.Core.IO.VirtualFileSystem"/>
            </summary>
        </member>
        <member name="P:SiliconStudio.Core.Storage.FileOdbBackend.AssetIndexMap">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Core.Storage.FileOdbBackend.OpenStream(SiliconStudio.Core.Storage.ObjectId,SiliconStudio.Core.IO.VirtualFileMode,SiliconStudio.Core.IO.VirtualFileAccess,SiliconStudio.Core.IO.VirtualFileShare)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Core.Storage.FileOdbBackend.GetSize(SiliconStudio.Core.Storage.ObjectId)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Core.Storage.FileOdbBackend.Exists(SiliconStudio.Core.Storage.ObjectId)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Core.Storage.FileOdbBackend.Write(SiliconStudio.Core.Storage.ObjectId,System.IO.Stream,System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Core.Storage.FileOdbBackend.CreateStream">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Core.Storage.FileOdbBackend.MoveToDatabase(System.String,SiliconStudio.Core.Storage.ObjectId)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Core.Storage.FileOdbBackend.Delete(SiliconStudio.Core.Storage.ObjectId)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Core.Storage.FileOdbBackend.EnumerateObjects">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Core.Storage.IOdbBackend">
            <summary>
            Base class for custom object database backends (ODB).
            </summary>
        </member>
        <member name="P:SiliconStudio.Core.Storage.IOdbBackend.AssetIndexMap">
            <summary>
            Gets the asset index map.
            </summary>
            <value>
            The asset index map.
            </value>
        </member>
        <member name="M:SiliconStudio.Core.Storage.IOdbBackend.OpenStream(SiliconStudio.Core.Storage.ObjectId,SiliconStudio.Core.IO.VirtualFileMode,SiliconStudio.Core.IO.VirtualFileAccess,SiliconStudio.Core.IO.VirtualFileShare)">
            <summary>
            Opens a <see cref="T:SiliconStudio.Core.IO.NativeStream" /> of the object with the specified <see cref="T:SiliconStudio.Core.Storage.ObjectId" />.
            </summary>
            <param name="objectId">The <see cref="T:SiliconStudio.Core.Storage.ObjectId" />.</param>
            <param name="mode">The mode.</param>
            <param name="access">The access.</param>
            <param name="share">The process share mode.</param>
            <returns>
            A <see cref="T:SiliconStudio.Core.IO.NativeStream" /> opened from the specified <see cref="T:SiliconStudio.Core.Storage.ObjectId" />.
            </returns>
        </member>
        <member name="M:SiliconStudio.Core.Storage.IOdbBackend.GetSize(SiliconStudio.Core.Storage.ObjectId)">
            <summary>
            Requests that this backend read an object's length (but not its contents).
            </summary>
            <param name="objectId">The <see cref="T:SiliconStudio.Core.Storage.ObjectId"/>.</param>
            <returns>The object size.</returns>
        </member>
        <member name="M:SiliconStudio.Core.Storage.IOdbBackend.Write(SiliconStudio.Core.Storage.ObjectId,System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Writes an object to the backing store.
            The backend may need to compute the object ID and return it to the caller.
            </summary>
            <param name="objectId">The <see cref="T:SiliconStudio.Core.Storage.ObjectId"/> if already computed, or <see cref="F:SiliconStudio.Core.Storage.ObjectId.Empty"/> if not determined yet.</param>
            <param name="dataStream">The data stream.</param>
            <param name="length">The data length.</param>
            <param name="forceWrite">Set to true to force writing the datastream even if a content is already stored with the same id. Default is false.</param>
            <returns>The generated <see cref="T:SiliconStudio.Core.Storage.ObjectId"/>.</returns>
        </member>
        <member name="M:SiliconStudio.Core.Storage.IOdbBackend.CreateStream">
            <summary>
            Creates a stream that will be saved to database when closed and/or disposed.
            </summary>
            <returns>a stream writer that should be passed to <see cref="!:SaveStream"/> in order to be stored in the database</returns>
        </member>
        <member name="M:SiliconStudio.Core.Storage.IOdbBackend.Exists(SiliconStudio.Core.Storage.ObjectId)">
            <summary>
            Determines weither the object with the specified <see cref="T:SiliconStudio.Core.Storage.ObjectId"/> exists.
            </summary>
            <param name="objectId">The <see cref="T:SiliconStudio.Core.Storage.ObjectId"/> to check existence for.</param>
            <returns><c>true</c> if an object with the specified <see cref="T:SiliconStudio.Core.Storage.ObjectId"/> exists; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SiliconStudio.Core.Storage.IOdbBackend.EnumerateObjects">
            <summary>
            Enumerates the object stored in this backend.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Core.Storage.IOdbBackend.Delete(SiliconStudio.Core.Storage.ObjectId)">
            <summary>
            Deletes the specified <see cref="T:SiliconStudio.Core.Storage.ObjectId"/>.
            </summary>
            <param name="objectId">The object id.</param>
        </member>
        <member name="M:SiliconStudio.Core.Storage.IOdbBackend.GetFilePath(SiliconStudio.Core.Storage.ObjectId)">
            <summary>
            Returns the file path corresponding to the given id (in the VFS domain), if appliable.
            </summary>
            <param name="objectId">The <see cref="T:SiliconStudio.Core.Storage.ObjectId"/>.</param>
            <returns>The file path.</returns>
        </member>
        <member name="T:SiliconStudio.Core.Storage.NamespaceDoc">
            <summary>
            The <see cref="N:SiliconStudio.Core.Storage"/> namespace provides classes and interfaces that manage storage of data in an object database at low-level.
            </summary>
        </member>
        <member name="T:SiliconStudio.Core.Storage.ObjectDatabase">
            <summary>
            Gives access to the object database.
            </summary>
        </member>
        <member name="M:SiliconStudio.Core.Storage.ObjectDatabase.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Core.Storage.ObjectDatabase" /> class.
            </summary>
            <param name="vfsMainUrl">The VFS main URL.</param>
            <param name="indexName">Name of the index file.</param>
            <param name="vfsAdditionalUrl">The VFS additional URL. It will be used only if vfsMainUrl is read-only.</param>
        </member>
        <member name="M:SiliconStudio.Core.Storage.ObjectDatabase.CreateDefaultDatabase">
            <summary>
            Creates a new instance of the <see cref="T:SiliconStudio.Core.Storage.ObjectDatabase"/> class using default database path, index name, and local database path, and loading default bundle.
            </summary>
            <returns>A new instance of the <see cref="T:SiliconStudio.Core.Storage.ObjectDatabase"/> class.</returns>
        </member>
        <member name="M:SiliconStudio.Core.Storage.ObjectDatabase.LoadBundle(System.String)">
            <summary>
            Loads the specified bundle.
            </summary>
            <param name="bundleName">Name of the bundle.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Core.Storage.ObjectDatabase.UnloadBundle(System.String)">
            <summary>
            Loads the specified bundle.
            </summary>
            <param name="bundleName">Name of the bundle.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Core.Storage.ObjectDatabase.Write(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Writes the specified data using the active <see cref="T:SiliconStudio.Core.Storage.IOdbBackend"/>.
            </summary>
            <param name="data">The data.</param>
            <param name="size">The size.</param>
            <param name="forceWrite">Set to true to force writing the datastream even if a content is already stored with the same id. Default is false.</param>
            <returns>The <see cref="T:SiliconStudio.Core.Storage.ObjectId"/> of the given data.</returns>
        </member>
        <member name="M:SiliconStudio.Core.Storage.ObjectDatabase.Write(System.IO.Stream)">
            <summary>
            Writes the specified data using the active <see cref="T:SiliconStudio.Core.Storage.IOdbBackend"/>.
            </summary>
            <param name="stream">The data stream.</param>
            <returns>The <see cref="T:SiliconStudio.Core.Storage.ObjectId"/> of the given data.</returns>
        </member>
        <member name="M:SiliconStudio.Core.Storage.ObjectDatabase.Write(System.IO.Stream,SiliconStudio.Core.Storage.ObjectId,System.Boolean)">
            <summary>
            Writes the specified data using the active <see cref="T:SiliconStudio.Core.Storage.IOdbBackend"/> and a precomputer <see cref="T:SiliconStudio.Core.Storage.ObjectId"/>.
            </summary>
            <param name="stream">The data stream.</param>
            <param name="objectId">The precomputed objectId.</param>
            <param name="forceWrite">Set to true to force writing the datastream even if a content is already stored with the same id. Default is false.</param>
            <returns>The <see cref="T:SiliconStudio.Core.Storage.ObjectId"/> of the given data, which is the same that the passed one.</returns>
        </member>
        <member name="M:SiliconStudio.Core.Storage.ObjectDatabase.OpenStream(SiliconStudio.Core.Storage.ObjectId,SiliconStudio.Core.IO.VirtualFileMode,SiliconStudio.Core.IO.VirtualFileAccess,SiliconStudio.Core.IO.VirtualFileShare)">
            <summary>
            Opens a stream for the specified <see cref="T:SiliconStudio.Core.Storage.ObjectId"/>.
            </summary>
            <param name="objectId">The object identifier.</param>
            <param name="mode">The mode.</param>
            <param name="access">The access.</param>
            <param name="share">The share.</param>
            <returns>A Stream.</returns>
            <exception cref="T:System.InvalidOperationException">Read-only object database.</exception>
        </member>
        <member name="M:SiliconStudio.Core.Storage.ObjectDatabase.Read(SiliconStudio.Core.Storage.ObjectId,System.Boolean)">
            <summary>
            Returns a data stream of the data specified <see cref="T:SiliconStudio.Core.Storage.ObjectId"/>.
            </summary>
            <param name="objectId">The <see cref="T:SiliconStudio.Core.Storage.ObjectId"/>.</param>
            <param name="checkCache">if set to <c>true</c> [check cache for existing blobs].</param>
            <returns>A <see cref="T:SiliconStudio.Core.IO.NativeStream"/> of the requested data.</returns>
        </member>
        <member name="M:SiliconStudio.Core.Storage.ObjectDatabase.CreateStream">
            <summary>
            Creates a stream that can then be saved directly in the database using <see cref="!:SaveStream"/>.
            </summary>
            <returns>a stream writer that should be passed to <see cref="!:SaveStream"/> in order to be stored in the database</returns>
        </member>
        <member name="M:SiliconStudio.Core.Storage.ObjectDatabase.CreateBlob(System.IntPtr,System.Int32)">
            <summary>
            Creates a in-memory binary blob as a <see cref="T:SiliconStudio.Core.Storage.Blob"/> that will also be stored using the active <see cref="T:SiliconStudio.Core.Storage.IOdbBackend"/>.
            Even if <see cref="T:SiliconStudio.Core.Storage.Blob"/> is new (not in the ODB), memory will be copied.
            </summary>
            <param name="data">The data.</param>
            <param name="size">The size.</param>
            <returns>The <see cref="T:SiliconStudio.Core.Storage.Blob"/> containing given data, with its reference count incremented.</returns>
        </member>
        <member name="M:SiliconStudio.Core.Storage.ObjectDatabase.Lookup(SiliconStudio.Core.Storage.ObjectId)">
            <summary>
            Lookups the <see cref="T:SiliconStudio.Core.Storage.Blob"/> with the specified <see cref="T:SiliconStudio.Core.Storage.ObjectId"/>.
            Any object returned will have its reference count incremented.
            </summary>
            <param name="objectId">The object id.</param>
            <returns>The <see cref="T:SiliconStudio.Core.Storage.Blob"/> matching this <see cref="T:SiliconStudio.Core.Storage.ObjectId"/> with an incremented reference count if it exists; [null] otherwise.</returns>
        </member>
        <member name="T:SiliconStudio.Core.Storage.ObjectDatabaseAssetIndexMap">
            <summary>
            Content Index Map implementation which regroups all the asset index maps of every loaded file backend and asset bundle backends.
            </summary>
        </member>
        <member name="M:SiliconStudio.Core.Storage.ObjectDatabaseAssetIndexMap.Merge(SiliconStudio.Core.Serialization.Assets.IAssetIndexMap)">
            <summary>
            Merges the values from the given asset index map.
            </summary>
            <param name="assetIndexMap">The asset index map to merge.</param>
        </member>
        <member name="M:SiliconStudio.Core.Storage.ObjectDatabaseAssetIndexMap.Merge(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,SiliconStudio.Core.Storage.ObjectId}})">
            <summary>
            Merges the values from the given assets.
            </summary>
            <param name="assets">The assets to merge.</param>
        </member>
        <member name="M:SiliconStudio.Core.Storage.ObjectDatabaseAssetIndexMap.Unmerge(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,SiliconStudio.Core.Storage.ObjectId}})">
            <summary>
            Unmerges the values from the given assets.
            </summary>
            <param name="assets">The assets to merge.</param>
        </member>
        <member name="T:SiliconStudio.Core.Storage.BundleOdbBackend">
            <summary>
            Object Database Backend (ODB) implementation that bundles multiple chunks into a .bundle files, optionally compressed with LZ4.
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.Storage.BundleOdbBackend.BundleExtension">
            <summary>
            The bundle file extension.
            </summary>
        </member>
        <member name="F:SiliconStudio.Core.Storage.BundleOdbBackend.vfsBundleDirectory">
            <summary>
            The default directory where bundle are stored.
            </summary>
        </member>
        <member name="P:SiliconStudio.Core.Storage.BundleOdbBackend.BundleResolve">
            <summary>
            Bundle resolve event asynchronous handler.
            </summary>
        </member>
        <member name="P:SiliconStudio.Core.Storage.BundleOdbBackend.AssetIndexMap">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Core.Storage.BundleOdbBackend.LoadBundle(System.String,SiliconStudio.Core.Storage.ObjectDatabaseAssetIndexMap)">
            <summary>
            Loads the specified bundle.
            </summary>
            <param name="bundleName">Name of the bundle.</param>
            <param name="objectDatabaseAssetIndexMap">The object database asset index map, where newly loaded assets will be merged (ignored if null).</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Core.Storage.BundleOdbBackend.UnloadBundle(System.String,SiliconStudio.Core.Storage.ObjectDatabaseAssetIndexMap)">
            <summary>
            Unload the specified bundle.
            </summary>
            <param name="bundleName">Name of the bundle.</param>
            <param name="objectDatabaseAssetIndexMap">The object database asset index map, where newly loaded assets will be merged (ignored if null).</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Core.Storage.BundleOdbBackend.ReadBundleDescription(System.IO.Stream)">
            <summary>
            Reads the bundle description.
            </summary>
            <param name="stream">The stream.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">
            Invalid bundle header
            or
            Bundle has not been properly written
            </exception>
        </member>
    </members>
</doc>
