<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xenko.Physics</name>
    </assembly>
    <members>
        <member name="M:Xenko.Physics.ColliderShape.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Xenko.Physics.ColliderShape.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="F:Xenko.Physics.ColliderShape.LocalOffset">
            <summary>
            The local offset
            </summary>
        </member>
        <member name="F:Xenko.Physics.ColliderShape.LocalRotation">
            <summary>
            The local rotation
            </summary>
        </member>
        <member name="M:Xenko.Physics.ColliderShape.UpdateLocalTransformations">
            <summary>
            Updates the local transformations, required if you change LocalOffset and/or LocalRotation.
            </summary>
        </member>
        <member name="F:Xenko.Physics.ColliderShape.PositiveCenterMatrix">
            <summary>
            Gets the positive center matrix.
            </summary>
            <value>
            The positive center matrix.
            </value>
        </member>
        <member name="F:Xenko.Physics.ColliderShape.NegativeCenterMatrix">
            <summary>
            Gets the negative center matrix.
            </summary>
            <value>
            The negative center matrix.
            </value>
        </member>
        <member name="P:Xenko.Physics.ColliderShape.Scaling">
            <summary>
            Gets or sets the scaling.
            Make sure that you manually created and assigned an exclusive ColliderShape to the Collider otherwise since the engine shares shapes among many Colliders, all the colliders will be scaled.
            Please note that this scaling has no relation to the TransformComponent scaling.
            </summary>
            <value>
            The scaling.
            </value>
        </member>
        <member name="P:Xenko.Physics.ColliderShape.Is2D">
            <summary>
            Gets a value indicating whether the collider shape is 2D.
            </summary>
            <value>
              <c>true</c> if [is2 d]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:Xenko.Physics.ColliderShapeTypes.Box">
            <summary>
                3D and 2D ( a plane )
            </summary>
        </member>
        <member name="F:Xenko.Physics.ColliderShapeTypes.Sphere">
            <summary>
                3D and 2D ( a circle )
            </summary>
        </member>
        <member name="F:Xenko.Physics.ColliderShapeTypes.Cylinder">
            <summary>
                3D only
            </summary>
        </member>
        <member name="F:Xenko.Physics.ColliderShapeTypes.Capsule">
            <summary>
                3D and 2D
            </summary>
        </member>
        <member name="M:Xenko.Physics.Constraint.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Xenko.Physics.Constraint.RigidBodyA">
            <summary>
            Gets the rigid body a.
            </summary>
            <value>
            The rigid body a.
            </value>
        </member>
        <member name="P:Xenko.Physics.Constraint.RigidBodyB">
            <summary>
            Gets the rigid body b.
            </summary>
            <value>
            The rigid body b.
            </value>
        </member>
        <member name="P:Xenko.Physics.Constraint.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Xenko.Physics.Constraint"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Xenko.Physics.Constraint.BreakingImpulseThreshold">
            <summary>
            Gets or sets the breaking impulse threshold.
            </summary>
            <value>
            The breaking impulse threshold.
            </value>
        </member>
        <member name="P:Xenko.Physics.Constraint.AppliedImpulse">
            <summary>
            Gets the applied impulse.
            </summary>
            <value>
            The applied impulse.
            </value>
        </member>
        <member name="P:Xenko.Physics.Constraint.Simulation">
            <summary>
            Gets the Simulation where this Constraint is being processed
            </summary>
        </member>
        <member name="P:Xenko.Physics.ConeTwistConstraint.FixThresh">
            <summary>
                Gets or sets the fix thresh.
            </summary>
            <value>
                The fix thresh.
            </value>
        </member>
        <member name="P:Xenko.Physics.ConeTwistConstraint.SwingSpan1">
            <summary>
                Gets the swing span1.
            </summary>
            <value>
                The swing span1.
            </value>
        </member>
        <member name="P:Xenko.Physics.ConeTwistConstraint.SwingSpan2">
            <summary>
                Gets the swing span2.
            </summary>
            <value>
                The swing span2.
            </value>
        </member>
        <member name="P:Xenko.Physics.ConeTwistConstraint.TwistAngle">
            <summary>
                Gets the twist angle.
            </summary>
            <value>
                The twist angle.
            </value>
        </member>
        <member name="P:Xenko.Physics.ConeTwistConstraint.TwistLimitSign">
            <summary>
                Gets the twist limit sign.
            </summary>
            <value>
                The twist limit sign.
            </value>
        </member>
        <member name="P:Xenko.Physics.ConeTwistConstraint.TwistSpan">
            <summary>
                Gets the twist span.
            </summary>
            <value>
                The twist span.
            </value>
        </member>
        <member name="P:Xenko.Physics.ConeTwistConstraint.IsPastSwingLimit">
            <summary>
                Gets a value indicating whether this instance is past swing limit.
            </summary>
            <value>
                <c>true</c> if this instance is past swing limit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Xenko.Physics.ConeTwistConstraint.SolveSwingLimit">
            <summary>
                Gets the solve swing limit.
            </summary>
            <value>
                The solve swing limit.
            </value>
        </member>
        <member name="P:Xenko.Physics.ConeTwistConstraint.SolveTwistLimit">
            <summary>
                Gets the solve twist limit.
            </summary>
            <value>
                The solve twist limit.
            </value>
        </member>
        <member name="M:Xenko.Physics.ConeTwistConstraint.SetFrames(Xenko.Core.Mathematics.Matrix,Xenko.Core.Mathematics.Matrix)">
            <summary>
                Sets the frames.
            </summary>
            <param name="frameA">The frame a.</param>
            <param name="frameB">The frame b.</param>
        </member>
        <member name="M:Xenko.Physics.ConeTwistConstraint.SetLimit(System.Single,System.Single,System.Single)">
            <summary>
                Sets the limit.
            </summary>
            <param name="swingSpan1">The swing span1.</param>
            <param name="swingSpan2">The swing span2.</param>
            <param name="twistSpan">The twist span.</param>
        </member>
        <member name="M:Xenko.Physics.ConeTwistConstraint.SetLimit(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Sets the limit.
            </summary>
            <param name="swingSpan1">The swing span1.</param>
            <param name="swingSpan2">The swing span2.</param>
            <param name="twistSpan">The twist span.</param>
            <param name="softness">The softness.</param>
            <param name="biasFactor">The bias factor.</param>
        </member>
        <member name="M:Xenko.Physics.ConeTwistConstraint.SetLimit(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Sets the limit.
            </summary>
            <param name="swingSpan1">The swing span1.</param>
            <param name="swingSpan2">The swing span2.</param>
            <param name="twistSpan">The twist span.</param>
            <param name="softness">The softness.</param>
            <param name="biasFactor">The bias factor.</param>
            <param name="relaxationFactor">The relaxation factor.</param>
        </member>
        <member name="M:Xenko.Physics.ConeTwistConstraint.SetAngularOnly(System.Boolean)">
            <summary>
                Sets the angular only.
            </summary>
            <param name="angularOnly">if set to <c>true</c> [angular only].</param>
        </member>
        <member name="M:Xenko.Physics.ConeTwistConstraint.SetDamping(System.Single)">
            <summary>
                Sets the damping.
            </summary>
            <param name="damping">The damping.</param>
        </member>
        <member name="M:Xenko.Physics.ConeTwistConstraint.EnableMotor(System.Boolean)">
            <summary>
                Enables the motor.
            </summary>
            <param name="b">if set to <c>true</c> [b].</param>
        </member>
        <member name="M:Xenko.Physics.ConeTwistConstraint.SetMaxMotorImpulse(System.Single)">
            <summary>
                Sets the maximum motor impulse.
            </summary>
            <param name="maxMotorImpulse">The maximum motor impulse.</param>
        </member>
        <member name="M:Xenko.Physics.ConeTwistConstraint.SetMaxMotorImpulseNormalized(System.Single)">
            <summary>
                Sets the maximum motor impulse normalized.
            </summary>
            <param name="maxMotorImpulse">The maximum motor impulse.</param>
        </member>
        <member name="M:Xenko.Physics.ConeTwistConstraint.SetMotorTarget(Xenko.Core.Mathematics.Quaternion)">
            <summary>
                Sets the motor target.
            </summary>
            <param name="q">The q.</param>
        </member>
        <member name="M:Xenko.Physics.ConeTwistConstraint.SetMotorTargetInConstraintSpace(Xenko.Core.Mathematics.Quaternion)">
            <summary>
                Sets the motor target in constraint space.
            </summary>
            <param name="q">The q.</param>
        </member>
        <member name="P:Xenko.Physics.GearConstraint.AxisA">
            <summary>
            Gets or sets the axis a.
            </summary>
            <value>
            The axis a.
            </value>
        </member>
        <member name="P:Xenko.Physics.GearConstraint.AxisB">
            <summary>
            Gets or sets the axis b.
            </summary>
            <value>
            The axis b.
            </value>
        </member>
        <member name="P:Xenko.Physics.GearConstraint.Ratio">
            <summary>
            Gets or sets the ratio.
            </summary>
            <value>
            The ratio.
            </value>
        </member>
        <member name="M:Xenko.Physics.Generic6DoFConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Physics.Generic6DoFConstraint"/> class.
            </summary>
        </member>
        <member name="M:Xenko.Physics.Generic6DoFConstraint.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Xenko.Physics.Generic6DoFConstraint.AngularLowerLimit">
            <summary>
            Gets or sets the angular lower limit.
            </summary>
            <value>
            The angular lower limit.
            </value>
        </member>
        <member name="P:Xenko.Physics.Generic6DoFConstraint.AngularUpperLimit">
            <summary>
            Gets or sets the angular upper limit.
            </summary>
            <value>
            The angular upper limit.
            </value>
        </member>
        <member name="P:Xenko.Physics.Generic6DoFConstraint.LinearLowerLimit">
            <summary>
            Gets or sets the linear lower limit.
            </summary>
            <value>
            The linear lower limit.
            </value>
        </member>
        <member name="P:Xenko.Physics.Generic6DoFConstraint.LinearUpperLimit">
            <summary>
            Gets or sets the linear upper limit.
            </summary>
            <value>
            The linear upper limit.
            </value>
        </member>
        <member name="M:Xenko.Physics.Generic6DoFConstraint.SetFrames(Xenko.Core.Mathematics.Matrix,Xenko.Core.Mathematics.Matrix)">
            <summary>
            Sets the frames.
            </summary>
            <param name="frameA">The frame a.</param>
            <param name="frameB">The frame b.</param>
        </member>
        <member name="M:Xenko.Physics.Generic6DoFConstraint.SetLimit(System.Int32,System.Single,System.Single)">
            <summary>
            Sets the limit.
            </summary>
            <param name="axis">The axis.</param>
            <param name="lo">The lo.</param>
            <param name="hi">The hi.</param>
        </member>
        <member name="P:Xenko.Physics.Generic6DoFConstraint.TranslationalLimitMotor">
            <summary>
            Gets the translational limit motor.
            </summary>
            <value>
            The translational limit motor.
            </value>
        </member>
        <member name="P:Xenko.Physics.Generic6DoFConstraint.RotationalLimitMotor">
            <summary>
            Gets the rotational limit motor.
            </summary>
            <value>
            The rotational limit motor.
            </value>
        </member>
        <member name="M:Xenko.Physics.Generic6DoFSpringConstraint.EnableSpring(System.Int32,System.Boolean)">
            <summary>
            Enables the spring.
            </summary>
            <param name="index">The index.</param>
            <param name="onOff">if set to <c>true</c> [on off].</param>
        </member>
        <member name="M:Xenko.Physics.Generic6DoFSpringConstraint.SetDamping(System.Int32,System.Single)">
            <summary>
            Sets the damping.
            </summary>
            <param name="index">The index.</param>
            <param name="damping">The damping.</param>
        </member>
        <member name="M:Xenko.Physics.Generic6DoFSpringConstraint.SetEquilibriumPoint(System.Int32,System.Single)">
            <summary>
            Sets the equilibrium point.
            </summary>
            <param name="index">The index.</param>
            <param name="val">The value.</param>
        </member>
        <member name="M:Xenko.Physics.Generic6DoFSpringConstraint.SetStiffness(System.Int32,System.Single)">
            <summary>
            Sets the stiffness.
            </summary>
            <param name="index">The index.</param>
            <param name="stiffness">The stiffness.</param>
        </member>
        <member name="M:Xenko.Physics.HingeConstraint.SetFrames(Xenko.Core.Mathematics.Matrix,Xenko.Core.Mathematics.Matrix)">
            <summary>
            Sets the frames.
            </summary>
            <param name="frameA">The frame a.</param>
            <param name="frameB">The frame b.</param>
        </member>
        <member name="P:Xenko.Physics.HingeConstraint.AngularOnly">
            <summary>
            Gets or sets a value indicating whether [angular only].
            </summary>
            <value>
              <c>true</c> if [angular only]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Xenko.Physics.HingeConstraint.HingeAngle">
            <summary>
            Gets the hinge angle.
            </summary>
            <value>
            The hinge angle.
            </value>
        </member>
        <member name="P:Xenko.Physics.HingeConstraint.MaxMotorImpulse">
            <summary>
            Gets or sets the maximum motor impulse.
            </summary>
            <value>
            The maximum motor impulse.
            </value>
        </member>
        <member name="P:Xenko.Physics.HingeConstraint.MotorTargetVelocity">
            <summary>
            Gets the motor target velocity.
            </summary>
            <value>
            The motor target velocity.
            </value>
        </member>
        <member name="P:Xenko.Physics.HingeConstraint.SolveLimit">
            <summary>
            Gets the solve limit.
            </summary>
            <value>
            The solve limit.
            </value>
        </member>
        <member name="P:Xenko.Physics.HingeConstraint.LowerLimit">
            <summary>
            Gets the lower limit.
            </summary>
            <value>
            The lower limit.
            </value>
        </member>
        <member name="P:Xenko.Physics.HingeConstraint.UpperLimit">
            <summary>
            Gets the upper limit.
            </summary>
            <value>
            The upper limit.
            </value>
        </member>
        <member name="P:Xenko.Physics.HingeConstraint.LimitSign">
            <summary>
            Gets the limit sign.
            </summary>
            <value>
            The limit sign.
            </value>
        </member>
        <member name="M:Xenko.Physics.HingeConstraint.SetLimit(System.Single,System.Single)">
            <summary>
            Sets the limit.
            </summary>
            <param name="low">The low.</param>
            <param name="high">The high.</param>
        </member>
        <member name="M:Xenko.Physics.HingeConstraint.SetLimit(System.Single,System.Single,System.Single)">
            <summary>
            Sets the limit.
            </summary>
            <param name="low">The low.</param>
            <param name="high">The high.</param>
            <param name="softness">The softness.</param>
        </member>
        <member name="M:Xenko.Physics.HingeConstraint.SetLimit(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the limit.
            </summary>
            <param name="low">The low.</param>
            <param name="high">The high.</param>
            <param name="softness">The softness.</param>
            <param name="biasFactor">The bias factor.</param>
        </member>
        <member name="M:Xenko.Physics.HingeConstraint.SetLimit(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the limit.
            </summary>
            <param name="low">The low.</param>
            <param name="high">The high.</param>
            <param name="softness">The softness.</param>
            <param name="biasFactor">The bias factor.</param>
            <param name="relaxationFactor">The relaxation factor.</param>
        </member>
        <member name="M:Xenko.Physics.HingeConstraint.EnableAngularMotor(System.Boolean,System.Single,System.Single)">
            <summary>
            Enables the angular motor.
            </summary>
            <param name="enableMotor">if set to <c>true</c> [enable motor].</param>
            <param name="targetVelocity">The target velocity.</param>
            <param name="maxMotorImpulse">The maximum motor impulse.</param>
        </member>
        <member name="M:Xenko.Physics.HingeConstraint.EnableMotor(System.Boolean)">
            <summary>
            Enables the motor.
            </summary>
            <param name="enableMotor">if set to <c>true</c> [enable motor].</param>
        </member>
        <member name="M:Xenko.Physics.HingeConstraint.SetMotorTarget(System.Single,System.Single)">
            <summary>
            Sets the motor target.
            </summary>
            <param name="targetAngle">The target angle.</param>
            <param name="dt">The dt.</param>
        </member>
        <member name="M:Xenko.Physics.HingeConstraint.SetMotorTarget(Xenko.Core.Mathematics.Quaternion,System.Single)">
            <summary>
            Sets the motor target.
            </summary>
            <param name="qAinB">The q ain b.</param>
            <param name="dt">The dt.</param>
        </member>
        <member name="P:Xenko.Physics.Point2PointConstraint.PivotInA">
            <summary>
            Gets or sets the pivot in a.
            </summary>
            <value>
            The pivot in a.
            </value>
        </member>
        <member name="P:Xenko.Physics.Point2PointConstraint.PivotInB">
            <summary>
            Gets or sets the pivot in b.
            </summary>
            <value>
            The pivot in b.
            </value>
        </member>
        <member name="P:Xenko.Physics.Point2PointConstraint.Damping">
            <summary>
            Gets or sets the damping.
            </summary>
            <value>
            The damping.
            </value>
        </member>
        <member name="P:Xenko.Physics.Point2PointConstraint.ImpulseClamp">
            <summary>
            Gets or sets the impulse clamp.
            </summary>
            <value>
            The impulse clamp.
            </value>
        </member>
        <member name="P:Xenko.Physics.Point2PointConstraint.Tau">
            <summary>
            Gets or sets the tau.
            </summary>
            <value>
            The tau.
            </value>
        </member>
        <member name="M:Xenko.Physics.RotationalLimitMotor.#ctor(BulletSharp.RotationalLimitMotor)">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Physics.RotationalLimitMotor"/> class.
            </summary>
            <param name="motor">The motor.</param>
        </member>
        <member name="M:Xenko.Physics.RotationalLimitMotor.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="P:Xenko.Physics.RotationalLimitMotor.AccumulatedImpulse">
            <summary>
            Gets or sets the accumulated impulse.
            </summary>
            <value>
            The accumulated impulse.
            </value>
        </member>
        <member name="P:Xenko.Physics.RotationalLimitMotor.Bounce">
            <summary>
            Gets or sets the bounce.
            </summary>
            <value>
            The bounce.
            </value>
        </member>
        <member name="P:Xenko.Physics.RotationalLimitMotor.CurrentLimit">
            <summary>
            Gets or sets the current limit.
            </summary>
            <value>
            The current limit.
            </value>
        </member>
        <member name="P:Xenko.Physics.RotationalLimitMotor.CurrentLimitError">
            <summary>
            Gets or sets the current limit error.
            </summary>
            <value>
            The current limit error.
            </value>
        </member>
        <member name="P:Xenko.Physics.RotationalLimitMotor.CurrentPosition">
            <summary>
            Gets or sets the current position.
            </summary>
            <value>
            The current position.
            </value>
        </member>
        <member name="P:Xenko.Physics.RotationalLimitMotor.Damping">
            <summary>
            Gets or sets the damping.
            </summary>
            <value>
            The damping.
            </value>
        </member>
        <member name="P:Xenko.Physics.RotationalLimitMotor.EnableMotor">
            <summary>
            Gets or sets a value indicating whether to enable the motor.
            </summary>
            <value>
              <c>true</c> if the motor is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Xenko.Physics.RotationalLimitMotor.HiLimit">
            <summary>
            Gets or sets the hi limit.
            </summary>
            <value>
            The hi limit.
            </value>
        </member>
        <member name="P:Xenko.Physics.RotationalLimitMotor.IsLimited">
            <summary>
            Gets a value indicating whether this instance is limited.
            </summary>
            <value>
            <c>true</c> if this instance is limited; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Xenko.Physics.RotationalLimitMotor.LimitSoftness">
            <summary>
            Gets or sets the limit softness.
            </summary>
            <value>
            The limit softness.
            </value>
        </member>
        <member name="P:Xenko.Physics.RotationalLimitMotor.LoLimit">
            <summary>
            Gets or sets the lo limit.
            </summary>
            <value>
            The lo limit.
            </value>
        </member>
        <member name="P:Xenko.Physics.RotationalLimitMotor.MaxLimitForce">
            <summary>
            Gets or sets the maximum limit force.
            </summary>
            <value>
            The maximum limit force.
            </value>
        </member>
        <member name="P:Xenko.Physics.RotationalLimitMotor.MaxMotorForce">
            <summary>
            Gets or sets the maximum motor force.
            </summary>
            <value>
            The maximum motor force.
            </value>
        </member>
        <member name="P:Xenko.Physics.RotationalLimitMotor.NormalCfm">
            <summary>
            Gets or sets the normal CFM.
            </summary>
            <value>
            The normal CFM.
            </value>
        </member>
        <member name="P:Xenko.Physics.RotationalLimitMotor.StopCfm">
            <summary>
            Gets or sets the stop CFM.
            </summary>
            <value>
            The stop CFM.
            </value>
        </member>
        <member name="P:Xenko.Physics.RotationalLimitMotor.StopErp">
            <summary>
            Gets or sets the stop erp.
            </summary>
            <value>
            The stop erp.
            </value>
        </member>
        <member name="P:Xenko.Physics.RotationalLimitMotor.TargetVelocity">
            <summary>
            Gets or sets the target velocity.
            </summary>
            <value>
            The target velocity.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.UpperLinearLimit">
            <summary>
            Gets or sets the upper linear limit.
            </summary>
            <value>
            The upper linear limit.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.LowerLinearLimit">
            <summary>
            Gets or sets the lower linear limit.
            </summary>
            <value>
            The lower linear limit.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.UpperAngularLimit">
            <summary>
            Gets or sets the upper angular limit.
            </summary>
            <value>
            The upper angular limit.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.LowerAngularLimit">
            <summary>
            Gets or sets the lower angular limit.
            </summary>
            <value>
            The lower angular limit.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.AngularDepth">
            <summary>
            Gets the angular depth.
            </summary>
            <value>
            The angular depth.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.AngularPosition">
            <summary>
            Gets the angular position.
            </summary>
            <value>
            The angular position.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.DampingDirAngular">
            <summary>
            Gets or sets the damping dir angular.
            </summary>
            <value>
            The damping dir angular.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.DampingDirLinear">
            <summary>
            Gets or sets the damping dir linear.
            </summary>
            <value>
            The damping dir linear.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.DampingLimAngular">
            <summary>
            Gets or sets the damping lim angular.
            </summary>
            <value>
            The damping lim angular.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.DampingLimLinear">
            <summary>
            Gets or sets the damping lim linear.
            </summary>
            <value>
            The damping lim linear.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.DampingOrthoAngular">
            <summary>
            Gets or sets the damping ortho angular.
            </summary>
            <value>
            The damping ortho angular.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.DampingOrthoLinear">
            <summary>
            Gets or sets the damping ortho linear.
            </summary>
            <value>
            The damping ortho linear.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.LinearDepth">
            <summary>
            Gets the linear depth.
            </summary>
            <value>
            The linear depth.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.LinearPosition">
            <summary>
            Gets the linear position.
            </summary>
            <value>
            The linear position.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.MaxAngMotorForce">
            <summary>
            Gets or sets the maximum ang motor force.
            </summary>
            <value>
            The maximum ang motor force.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.MaxLinearMotorForce">
            <summary>
            Gets or sets the maximum linear motor force.
            </summary>
            <value>
            The maximum linear motor force.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.PoweredAngularMotor">
            <summary>
            Gets or sets a value indicating whether [powered angular motor].
            </summary>
            <value>
              <c>true</c> if [powered angular motor]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.PoweredLinearMotor">
            <summary>
            Gets or sets a value indicating whether [powered linear motor].
            </summary>
            <value>
              <c>true</c> if [powered linear motor]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.RestitutionDirAngular">
            <summary>
            Gets or sets the restitution dir angular.
            </summary>
            <value>
            The restitution dir angular.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.RestitutionDirLinear">
            <summary>
            Gets or sets the restitution dir linear.
            </summary>
            <value>
            The restitution dir linear.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.RestitutionLimAngular">
            <summary>
            Gets or sets the restitution lim angular.
            </summary>
            <value>
            The restitution lim angular.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.RestitutionLimLinear">
            <summary>
            Gets or sets the restitution lim linear.
            </summary>
            <value>
            The restitution lim linear.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.RestitutionOrthoAngular">
            <summary>
            Gets or sets the restitution ortho angular.
            </summary>
            <value>
            The restitution ortho angular.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.RestitutionOrthoLinear">
            <summary>
            Gets or sets the restitution ortho linear.
            </summary>
            <value>
            The restitution ortho linear.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.SoftnessDirAngular">
            <summary>
            Gets or sets the softness dir angular.
            </summary>
            <value>
            The softness dir angular.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.SoftnessDirLinear">
            <summary>
            Gets or sets the softness dir linear.
            </summary>
            <value>
            The softness dir linear.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.SoftnessLimAngular">
            <summary>
            Gets or sets the softness lim angular.
            </summary>
            <value>
            The softness lim angular.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.SoftnessLimLinear">
            <summary>
            Gets or sets the softness lim linear.
            </summary>
            <value>
            The softness lim linear.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.SoftnessOrthoAngular">
            <summary>
            Gets or sets the softness ortho angular.
            </summary>
            <value>
            The softness ortho angular.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.SoftnessOrthoLinear">
            <summary>
            Gets or sets the softness ortho linear.
            </summary>
            <value>
            The softness ortho linear.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.SolveAngularLimit">
            <summary>
            Gets a value indicating whether [solve angular limit].
            </summary>
            <value>
              <c>true</c> if [solve angular limit]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.SolveLinearLimit">
            <summary>
            Gets a value indicating whether [solve linear limit].
            </summary>
            <value>
              <c>true</c> if [solve linear limit]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.TargetAngularMotorVelocity">
            <summary>
            Gets or sets the target angular motor velocity.
            </summary>
            <value>
            The target angular motor velocity.
            </value>
        </member>
        <member name="P:Xenko.Physics.SliderConstraint.TargetLinearMotorVelocity">
            <summary>
            Gets or sets the target linear motor velocity.
            </summary>
            <value>
            The target linear motor velocity.
            </value>
        </member>
        <member name="M:Xenko.Physics.SliderConstraint.SetFrames(Xenko.Core.Mathematics.Matrix,Xenko.Core.Mathematics.Matrix)">
            <summary>
            Sets the frames.
            </summary>
            <param name="frameA">The frame a.</param>
            <param name="frameB">The frame b.</param>
        </member>
        <member name="M:Xenko.Physics.TranslationalLimitMotor.#ctor(BulletSharp.TranslationalLimitMotor)">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Physics.TranslationalLimitMotor"/> class.
            </summary>
            <param name="motor">The motor.</param>
        </member>
        <member name="M:Xenko.Physics.TranslationalLimitMotor.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="P:Xenko.Physics.TranslationalLimitMotor.AccumulatedImpulse">
            <summary>
            Gets or sets the accumulated impulse.
            </summary>
            <value>
            The accumulated impulse.
            </value>
        </member>
        <member name="P:Xenko.Physics.TranslationalLimitMotor.CurrentLimitError">
            <summary>
            Gets or sets the current limit error.
            </summary>
            <value>
            The current limit error.
            </value>
        </member>
        <member name="P:Xenko.Physics.TranslationalLimitMotor.CurrentLinearDiff">
            <summary>
            Gets or sets the current linear difference.
            </summary>
            <value>
            The current linear difference.
            </value>
        </member>
        <member name="P:Xenko.Physics.TranslationalLimitMotor.Damping">
            <summary>
            Gets or sets the damping.
            </summary>
            <value>
            The damping.
            </value>
        </member>
        <member name="P:Xenko.Physics.TranslationalLimitMotor.LimitSoftness">
            <summary>
            Gets or sets the limit softness.
            </summary>
            <value>
            The limit softness.
            </value>
        </member>
        <member name="P:Xenko.Physics.TranslationalLimitMotor.LowerLimit">
            <summary>
            Gets or sets the lower limit.
            </summary>
            <value>
            The lower limit.
            </value>
        </member>
        <member name="P:Xenko.Physics.TranslationalLimitMotor.MaxMotorForce">
            <summary>
            Gets or sets the maximum motor force.
            </summary>
            <value>
            The maximum motor force.
            </value>
        </member>
        <member name="P:Xenko.Physics.TranslationalLimitMotor.NormalCFM">
            <summary>
            Gets or sets the normal CFM.
            </summary>
            <value>
            The normal CFM.
            </value>
        </member>
        <member name="P:Xenko.Physics.TranslationalLimitMotor.Restitution">
            <summary>
            Gets or sets the restitution.
            </summary>
            <value>
            The restitution.
            </value>
        </member>
        <member name="P:Xenko.Physics.TranslationalLimitMotor.StopCFM">
            <summary>
            Gets or sets the stop CFM.
            </summary>
            <value>
            The stop CFM.
            </value>
        </member>
        <member name="P:Xenko.Physics.TranslationalLimitMotor.StopERP">
            <summary>
            Gets or sets the stop erp.
            </summary>
            <value>
            The stop erp.
            </value>
        </member>
        <member name="P:Xenko.Physics.TranslationalLimitMotor.TargetVelocity">
            <summary>
            Gets or sets the target velocity.
            </summary>
            <value>
            The target velocity.
            </value>
        </member>
        <member name="P:Xenko.Physics.TranslationalLimitMotor.UpperLimit">
            <summary>
            Gets or sets the upper limit.
            </summary>
            <value>
            The upper limit.
            </value>
        </member>
        <member name="F:Xenko.Physics.ConstraintTypes.Point2Point">
            <summary>
                The translation vector of the matrix to create this will represent the pivot, the rest is ignored
            </summary>
        </member>
        <member name="F:Xenko.Physics.ConstraintTypes.Gear">
            <summary>
                The translation vector of the matrix to create this will represent the axis, the rest is ignored
            </summary>
        </member>
        <member name="F:Xenko.Physics.ContactPointEqualityComparer.Default">
            <summary>
            Gets the default.
            </summary>
        </member>
        <member name="M:Xenko.Physics.ContactPointEqualityComparer.Equals(Xenko.Physics.ContactPoint,Xenko.Physics.ContactPoint)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Physics.ContactPointEqualityComparer.GetHashCode(Xenko.Physics.ContactPoint)">
            <inheritdoc/>
        </member>
        <member name="F:Xenko.Physics.BoxColliderShapeDesc.Is2D">
            <userdoc>
            Select this if this shape will represent a Circle 2D shape
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.BoxColliderShapeDesc.Size">
            <userdoc>
            The size of one edge of the box.
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.BoxColliderShapeDesc.LocalOffset">
            <userdoc>
            The offset with the real graphic mesh.
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.BoxColliderShapeDesc.LocalRotation">
            <userdoc>
            The local rotation of the collider shape.
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.CapsuleColliderShapeDesc.Is2D">
            <userdoc>
            Select this if this shape will represent a 2D shape
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.CapsuleColliderShapeDesc.Length">
            <userdoc>
            The length of the capsule (distance between the center of the two sphere centers).
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.CapsuleColliderShapeDesc.Radius">
            <userdoc>
            The radius of the capsule.
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.CapsuleColliderShapeDesc.Orientation">
            <userdoc>
            The orientation of the capsule.
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.CapsuleColliderShapeDesc.LocalOffset">
            <userdoc>
            The offset with the real graphic mesh.
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.CapsuleColliderShapeDesc.LocalRotation">
            <userdoc>
            The local rotation of the collider shape.
            </userdoc>
        </member>
        <member name="P:Xenko.Physics.ColliderShapeAssetDesc.Shape">
            <userdoc>
            The reference to the collider Shape asset.
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.ConeColliderShapeDesc.Height">
            <userdoc>
            The height of the cylinder
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.ConeColliderShapeDesc.Radius">
            <userdoc>
            The radius of the cylinder
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.ConeColliderShapeDesc.Orientation">
            <userdoc>
            The orientation of the cylinder.
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.ConeColliderShapeDesc.LocalOffset">
            <userdoc>
            The offset with the real graphic mesh.
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.ConeColliderShapeDesc.LocalRotation">
            <userdoc>
            The local rotation of the collider shape.
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.ConvexHullColliderShapeDesc.Model">
            <userdoc>
            Model asset from where the engine will derive the convex hull.
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.ConvexHullColliderShapeDesc.LocalOffset">
            <userdoc>
            The offset with the real graphic mesh.
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.ConvexHullColliderShapeDesc.LocalRotation">
            <userdoc>
            The local rotation of the collider shape.
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.ConvexHullColliderShapeDesc.SimpleWrap">
            <userdoc>
            If this is checked the following parameters are totally ignored, as only a simple convex hull of the whole model will be generated.
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.ConvexHullColliderShapeDesc.Scaling">
            <userdoc>
            The scaling of the generated convex hull.
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.ConvexHullColliderShapeDesc.Depth">
            <userdoc>
            Control how many sub convex hulls will be created, more depth will result in a more complex decomposition.
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.ConvexHullColliderShapeDesc.PosSampling">
            <userdoc>
            How many position samples to internally compute clipping planes ( the higher the more complex ).
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.ConvexHullColliderShapeDesc.AngleSampling">
            <userdoc>
            How many angle samples to internally compute clipping planes ( the higher the more complex ), nested with position samples, for each position sample it will compute the amount defined here.
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.ConvexHullColliderShapeDesc.PosRefine">
            <userdoc>
            If higher then 0 the computation will try to further improve the shape position sampling (this will slow down the process).
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.ConvexHullColliderShapeDesc.AngleRefine">
            <userdoc>
            If higher then 0 the computation will try to further improve the shape angle sampling (this will slow down the process).
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.ConvexHullColliderShapeDesc.Alpha">
            <userdoc>
            Applied to the concavity during crippling plane approximation.
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.ConvexHullColliderShapeDesc.Threshold">
            <userdoc>
            Threshold of concavity, rising this will make the shape simpler.
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.CylinderColliderShapeDesc.Height">
            <userdoc>
            The height of the cylinder
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.CylinderColliderShapeDesc.Radius">
            <userdoc>
            The radius of the cylinder
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.CylinderColliderShapeDesc.Orientation">
            <userdoc>
            The orientation of the cylinder.
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.CylinderColliderShapeDesc.LocalOffset">
            <userdoc>
            The offset with the real graphic mesh.
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.CylinderColliderShapeDesc.LocalRotation">
            <userdoc>
            The local rotation of the collider shape.
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.SphereColliderShapeDesc.Is2D">
            <userdoc>
            Select this if this shape will represent a Circle 2D shape
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.SphereColliderShapeDesc.Radius">
            <userdoc>
            The radius of the sphere/circle.
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.SphereColliderShapeDesc.LocalOffset">
            <userdoc>
            The offset with the real graphic mesh.
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.StaticPlaneColliderShapeDesc.Normal">
            <userdoc>
            The normal of the infinite plane.
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.StaticPlaneColliderShapeDesc.Offset">
            <userdoc>
            The distance offset.
            </userdoc>
        </member>
        <member name="M:Xenko.Physics.CharacterComponent.Jump(Xenko.Core.Mathematics.Vector3)">
            <summary>
            Jumps this instance.
            </summary>
        </member>
        <member name="M:Xenko.Physics.CharacterComponent.Jump">
            <summary>
            Jumps this instance.
            </summary>
        </member>
        <member name="P:Xenko.Physics.CharacterComponent.StepHeight">
            <summary>
            Gets or sets the height of the character step.
            </summary>
            <value>
            The height of the character step.
            </value>
            <userdoc>
            Only valid for CharacterController type, describes the max slope height a character can climb. Cannot change during run-time.
            </userdoc>
        </member>
        <member name="P:Xenko.Physics.CharacterComponent.FallSpeed">
            <summary>
            Gets or sets if this character element fall speed
            </summary>
            <value>
            true, false
            </value>
            <userdoc>
            The fall speed of this character
            </userdoc>
        </member>
        <member name="P:Xenko.Physics.CharacterComponent.MaxSlope">
            <summary>
            Gets or sets if this character element max slope
            </summary>
            <value>
            true, false
            </value>
            <userdoc>
            The max slope this character can climb
            </userdoc>
        </member>
        <member name="P:Xenko.Physics.CharacterComponent.JumpSpeed">
            <summary>
            Gets or sets if this character jump speed
            </summary>
            <value>
            true, false
            </value>
            <userdoc>
            The speed of the jump
            </userdoc>
        </member>
        <member name="P:Xenko.Physics.CharacterComponent.Gravity">
            <summary>
            Gets or sets if this character gravity
            </summary>
            <value>
            true, false
            </value>
            <userdoc>
            The gravity force applied to this character
            </userdoc>
        </member>
        <member name="P:Xenko.Physics.CharacterComponent.IsGrounded">
            <summary>
            Gets a value indicating whether this instance is on the ground.
            </summary>
            <value>
            <c>true</c> if this instance is grounded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Xenko.Physics.CharacterComponent.Teleport(Xenko.Core.Mathematics.Vector3)">
            <summary>
            Teleports the specified target position.
            </summary>
            <param name="targetPosition">The target position.</param>
        </member>
        <member name="M:Xenko.Physics.CharacterComponent.Move(Xenko.Core.Mathematics.Vector3)">
            <summary>
            Moves the character towards the specified movement vector.
            Motion will stay in place unless modified or canceled passing Vector3.Zero.
            </summary>
            <param name="movement">The velocity vector, typically direction * delta time `var dt = this.GetSimulation().FixedTimeStep;` * speed.</param>
        </member>
        <member name="M:Xenko.Physics.CharacterComponent.SetVelocity(Xenko.Core.Mathematics.Vector3)">
            <summary>
            Sets the character velocity.
            Velocity will be applied every frame unless modified or canceled passing Vector3.Zero.
            </summary>
            <remarks>The engine internally will multiply velocity with the simulation fixed time step.</remarks>
            <param name="velocity">The velocity vector, typically direction * speed.</param>
        </member>
        <member name="P:Xenko.Physics.CharacterComponent.Orientation">
            <summary>
            Sets or gets the orientation of the Entity attached to this character controller
            </summary>
            <remarks>This orientation has no impact in the physics simulation</remarks>
        </member>
        <member name="P:Xenko.Physics.PhysicsSkinnedComponentBase.NodeName">
            <summary>
            Gets or sets the link (usually a bone).
            </summary>
            <value>
            The mesh's linked bone name
            </value>
            <userdoc>
            In the case of skinned mesh this must be the bone node name linked with this element. Cannot change during run-time.
            </userdoc>
        </member>
        <member name="P:Xenko.Physics.PhysicsTriggerComponentBase.Enabled">
            <summary>
            Gets or sets if this element is enabled in the physics engine
            </summary>
            <value>
            true, false
            </value>
            <userdoc>
            If this element is enabled in the physics engine
            </userdoc>
        </member>
        <member name="P:Xenko.Physics.RigidbodyComponent.LinkedConstraints">
            <summary>
            Gets the linked constraints.
            </summary>
            <value>
            The linked constraints.
            </value>
        </member>
        <member name="P:Xenko.Physics.RigidbodyComponent.IsKinematic">
            <summary>
            Gets or sets the kinematic property
            </summary>
            <value>true, false</value>
            <userdoc>
            Move the rigidbody only by the transform property, not other forces
            </userdoc>
        </member>
        <member name="P:Xenko.Physics.RigidbodyComponent.Mass">
            <summary>
            Gets or sets the mass of this Rigidbody
            </summary>
            <value>
            true, false
            </value>
            <userdoc>
            Objects with higher mass push objects with lower mass more when they collide. For large differences, use point values; for example, write 0.1 or 10, not 1 or 100000.
            </userdoc>
        </member>
        <member name="P:Xenko.Physics.RigidbodyComponent.ColliderShape">
            <summary>
            Gets the collider shape.
            </summary>
            <value>
            The collider shape
            </value>
        </member>
        <member name="P:Xenko.Physics.RigidbodyComponent.LinearDamping">
            <summary>
            Gets or sets the linear damping of this rigidbody
            </summary>
            <value>
            true, false
            </value>
            <userdoc>
            The amount of damping for directional forces
            </userdoc>
        </member>
        <member name="P:Xenko.Physics.RigidbodyComponent.AngularDamping">
            <summary>
            Gets or sets the angular damping of this rigidbody
            </summary>
            <value>
            true, false
            </value>
            <userdoc>
            The amount of damping for rotational forces
            </userdoc>
        </member>
        <member name="P:Xenko.Physics.RigidbodyComponent.OverrideGravity">
            <summary>
            Gets or sets if this Rigidbody overrides world gravity
            </summary>
            <value>
            true, false
            </value>
            <userdoc>
            Override gravity with the vector specified in Gravity
            </userdoc>
        </member>
        <member name="P:Xenko.Physics.RigidbodyComponent.Gravity">
            <summary>
            Gets or sets the gravity acceleration applied to this RigidBody
            </summary>
            <value>
            A vector representing moment and direction
            </value>
            <userdoc>
            The gravity acceleration applied to this rigidbody
            </userdoc>
        </member>
        <member name="P:Xenko.Physics.RigidbodyComponent.RigidBodyType">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Xenko.Physics.RigidbodyComponent.TotalTorque">
            <summary>
            Gets the total torque.
            </summary>
            <value>
            The total torque.
            </value>
        </member>
        <member name="M:Xenko.Physics.RigidbodyComponent.ApplyImpulse(Xenko.Core.Mathematics.Vector3)">
            <summary>
            Applies the impulse.
            </summary>
            <param name="impulse">The impulse.</param>
        </member>
        <member name="M:Xenko.Physics.RigidbodyComponent.ApplyImpulse(Xenko.Core.Mathematics.Vector3,Xenko.Core.Mathematics.Vector3)">
            <summary>
            Applies the impulse.
            </summary>
            <param name="impulse">The impulse.</param>
            <param name="localOffset">The local offset.</param>
        </member>
        <member name="M:Xenko.Physics.RigidbodyComponent.ApplyForce(Xenko.Core.Mathematics.Vector3)">
            <summary>
            Applies the force.
            </summary>
            <param name="force">The force.</param>
        </member>
        <member name="M:Xenko.Physics.RigidbodyComponent.ApplyForce(Xenko.Core.Mathematics.Vector3,Xenko.Core.Mathematics.Vector3)">
            <summary>
            Applies the force.
            </summary>
            <param name="force">The force.</param>
            <param name="localOffset">The local offset.</param>
        </member>
        <member name="M:Xenko.Physics.RigidbodyComponent.ApplyTorque(Xenko.Core.Mathematics.Vector3)">
            <summary>
            Applies the torque.
            </summary>
            <param name="torque">The torque.</param>
        </member>
        <member name="M:Xenko.Physics.RigidbodyComponent.ApplyTorqueImpulse(Xenko.Core.Mathematics.Vector3)">
            <summary>
            Applies the torque impulse.
            </summary>
            <param name="torque">The torque.</param>
        </member>
        <member name="M:Xenko.Physics.RigidbodyComponent.ClearForces">
            <summary>
            Clears all forces being applied to this rigidbody
            </summary>
        </member>
        <member name="P:Xenko.Physics.RigidbodyComponent.AngularVelocity">
            <summary>
            Gets or sets the angular velocity.
            </summary>
            <value>
            The angular velocity.
            </value>
        </member>
        <member name="P:Xenko.Physics.RigidbodyComponent.LinearVelocity">
            <summary>
            Gets or sets the linear velocity.
            </summary>
            <value>
            The linear velocity.
            </value>
        </member>
        <member name="P:Xenko.Physics.RigidbodyComponent.TotalForce">
            <summary>
            Gets the total force.
            </summary>
            <value>
            The total force.
            </value>
        </member>
        <member name="P:Xenko.Physics.RigidbodyComponent.AngularFactor">
            <summary>
            Gets or sets the angular factor.
            </summary>
            <value>
            The angular factor.
            </value>
        </member>
        <member name="P:Xenko.Physics.RigidbodyComponent.LinearFactor">
            <summary>
            Gets or sets the linear factor.
            </summary>
            <value>
            The linear factor.
            </value>
        </member>
        <member name="P:Xenko.Physics.PhysicsColliderShape.Descriptions">
            <summary>
            Used to serialize one or more collider shapes into one single shape
            Reading this value will automatically parse the Shape property into its description
            Writing this value will automatically compose, create and populate the Shape property
            </summary>
        </member>
        <member name="T:Xenko.Physics.HitResult">
            <summary>
            The result of a Physics Raycast or ShapeSweep operation
            </summary>
        </member>
        <member name="F:Xenko.Physics.HitResult.Collider">
            <summary>
            The Collider hit if Succeeded
            </summary>
        </member>
        <member name="F:Xenko.Physics.PhysicsSettings.MaxSubSteps">
            <userdoc>
            The maximum number of simulations the the physics engine can run in a frame to compensate for slowdown
            </userdoc>
        </member>
        <member name="F:Xenko.Physics.PhysicsSettings.FixedTimeStep">
            <userdoc>
            The length in seconds of a physics simulation frame. The default is 0.016667 (one sixtieth of a second)
            </userdoc>
        </member>
        <member name="T:Xenko.Physics.PhysicsScriptComponentExtensions">
            <summary>
            Extension methods for the <see cref="T:Xenko.Engine.ScriptComponent"/> related to phystics
            </summary>
        </member>
        <member name="M:Xenko.Physics.PhysicsScriptComponentExtensions.GetSimulation(Xenko.Engine.ScriptComponent)">
            <summary>
            Gets the curent <see cref="T:Xenko.Physics.Simulation"/>.
            </summary>
            <param name="scriptComponent">The script component to query physics from</param>
            <returns>The simulation object or null if there are no simulation running for the current scene.</returns>
        </member>
        <member name="F:Xenko.Physics.RigidBodyTypes.Static">
            <summary>
                They are supposed to never move, they are not automatically updated by the engine.
                They can be moved tho by an explicit call to UpdateTransformation(), results are not realist for dynamic simulation
                so use it wisely.
                If you plan to move the entity it is advised to use Kinematic, which allows the normal dynamic simulation.
            </summary>
        </member>
        <member name="F:Xenko.Physics.RigidBodyTypes.Dynamic">
            <summary>
                The Physics engine is the authority for this kind of rigidbody, you should move them using forces and/or impulses,
                never directly editing the Transformation
            </summary>
        </member>
        <member name="F:Xenko.Physics.RigidBodyTypes.Kinematic">
            <summary>
                You can move this kind of rigidbody around and the physics engine will interpolate and perform dynamic interactions
                with dynamic bodies
                Notice that there is no dynamic interaction with static and other kinematic bodies
            </summary>
        </member>
        <member name="T:Xenko.Physics.ShapeOrientation">
            <summary>
            Defines the different possible orientations of a shape.
            </summary>
        </member>
        <member name="F:Xenko.Physics.ShapeOrientation.UpX">
            <summary>
            The shape is aligned with the Ox axis.
            </summary>
            <userdoc>The top of shape is aligned with the Ox axis.</userdoc>
        </member>
        <member name="F:Xenko.Physics.ShapeOrientation.UpY">
            <summary>
            The shape is aligned with the Oy axis.
            </summary>
            <userdoc>The top shape is aligned with the Oy axis.</userdoc>
        </member>
        <member name="F:Xenko.Physics.ShapeOrientation.UpZ">
            <summary>
            The shape is aligned with the Oz axis.
            </summary>
            <userdoc>The top shape is aligned with the Oz axis.</userdoc>
        </member>
        <member name="M:Xenko.Physics.BoxColliderShape.#ctor(System.Boolean,Xenko.Core.Mathematics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Physics.BoxColliderShape"/> class.
            </summary>
            <param name="is2D">If this cube is a 2D quad</param>
            <param name="size">The size of the cube</param>
        </member>
        <member name="M:Xenko.Physics.CapsuleColliderShape.#ctor(System.Boolean,System.Single,System.Single,Xenko.Physics.ShapeOrientation)">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Physics.CapsuleColliderShape"/> class.
            </summary>
            <param name="is2D">if set to <c>true</c> [is2 d].</param>
            <param name="radius">The radius.</param>
            <param name="length">The length of the capsule.</param>
            <param name="orientation">Up axis.</param>
        </member>
        <member name="M:Xenko.Physics.CompoundColliderShape.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Physics.CompoundColliderShape"/> class.
            </summary>
        </member>
        <member name="M:Xenko.Physics.CompoundColliderShape.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Xenko.Physics.CompoundColliderShape.AddChildShape(Xenko.Physics.ColliderShape)">
            <summary>
            Adds a child shape.
            </summary>
            <param name="shape">The shape.</param>
        </member>
        <member name="M:Xenko.Physics.CompoundColliderShape.RemoveChildShape(Xenko.Physics.ColliderShape)">
            <summary>
            Removes a child shape.
            </summary>
            <param name="shape">The shape.</param>
        </member>
        <member name="P:Xenko.Physics.CompoundColliderShape.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Xenko.Physics.ColliderShape"/> with the specified i.
            </summary>
            <value>
            The <see cref="T:Xenko.Physics.ColliderShape"/>.
            </value>
            <param name="i">The i.</param>
            <returns></returns>
        </member>
        <member name="P:Xenko.Physics.CompoundColliderShape.Count">
            <summary>
            Gets the count.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="M:Xenko.Physics.ConeColliderShape.#ctor(System.Single,System.Single,Xenko.Physics.ShapeOrientation)">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Physics.ConeColliderShape"/> class.
            </summary>
            <param name="orientation">Up axis.</param>
            <param name="radius">The radius of the cone</param>
            <param name="height">The height of the cone</param>
        </member>
        <member name="M:Xenko.Physics.CylinderColliderShape.#ctor(System.Single,System.Single,Xenko.Physics.ShapeOrientation)">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Physics.CylinderColliderShape"/> class.
            </summary>
            <param name="orientation">Up axis.</param>
            <param name="radius">The radius of the cylinder</param>
            <param name="height">The height of the cylinder</param>
        </member>
        <member name="M:Xenko.Physics.SphereColliderShape.#ctor(System.Boolean,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Physics.SphereColliderShape"/> class.
            </summary>
            <param name="is2D">if set to <c>true</c> [is2 d].</param>
            <param name="radius">The radius.</param>
        </member>
        <member name="M:Xenko.Physics.StaticPlaneColliderShape.#ctor(Xenko.Core.Mathematics.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Physics.StaticPlaneColliderShape"/> class.
            A static plane that is solid to infinity on one side.
            Several of these can be used to confine a convex space in a manner that completely prevents tunneling to the outside.
            The plane itself is specified with a normal and distance as is standard in mathematics.
            </summary>
            <param name="normal">The normal.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="F:Xenko.Physics.Simulation.DisableSimulation">
            <summary>
            Totally disable the simulation if set to true
            </summary>
        </member>
        <member name="F:Xenko.Physics.Simulation.OnSimulationCreation">
            <summary>
            Temporary solution to inject engine flags
            </summary>
        </member>
        <member name="M:Xenko.Physics.Simulation.#ctor(Xenko.Physics.PhysicsProcessor,Xenko.Physics.PhysicsSettings)">
            <summary>
            Initializes the Physics engine using the specified flags.
            </summary>
            <param name="processor"></param>
            <param name="configuration"></param>
            <exception cref="T:System.NotImplementedException">SoftBody processing is not yet available</exception>
        </member>
        <member name="M:Xenko.Physics.Simulation.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Xenko.Physics.Simulation.ColliderShapesRendering">
            <summary>
            Enables or disables the rendering of collider shapes
            </summary>
        </member>
        <member name="M:Xenko.Physics.Simulation.CreateConstraint(Xenko.Physics.ConstraintTypes,Xenko.Physics.RigidbodyComponent,Xenko.Core.Mathematics.Matrix,System.Boolean)">
            <summary>
            Creates the constraint.
            </summary>
            <param name="type">The type.</param>
            <param name="rigidBodyA">The rigid body a.</param>
            <param name="frameA">The frame a.</param>
            <param name="useReferenceFrameA">if set to <c>true</c> [use reference frame a].</param>
            <returns></returns>
            <exception cref="T:System.Exception">
            Cannot perform this action when the physics engine is set to CollisionsOnly
            or
            Both RigidBodies must be valid
            or
            A Gear constraint always needs two rigidbodies to be created.
            </exception>
        </member>
        <member name="M:Xenko.Physics.Simulation.CreateConstraint(Xenko.Physics.ConstraintTypes,Xenko.Physics.RigidbodyComponent,Xenko.Physics.RigidbodyComponent,Xenko.Core.Mathematics.Matrix,Xenko.Core.Mathematics.Matrix,System.Boolean)">
            <summary>
            Creates the constraint.
            </summary>
            <param name="type">The type.</param>
            <param name="rigidBodyA">The rigid body a.</param>
            <param name="rigidBodyB">The rigid body b.</param>
            <param name="frameA">The frame a.</param>
            <param name="frameB">The frame b.</param>
            <param name="useReferenceFrameA">if set to <c>true</c> [use reference frame a].</param>
            <returns></returns>
            <exception cref="T:System.Exception">
            Cannot perform this action when the physics engine is set to CollisionsOnly
            or
            Both RigidBodies must be valid
            </exception>
        </member>
        <member name="M:Xenko.Physics.Simulation.AddConstraint(Xenko.Physics.Constraint)">
            <summary>
            Adds the constraint to the engine processing pipeline.
            </summary>
            <param name="constraint">The constraint.</param>
            <exception cref="T:System.Exception">Cannot perform this action when the physics engine is set to CollisionsOnly</exception>
        </member>
        <member name="M:Xenko.Physics.Simulation.AddConstraint(Xenko.Physics.Constraint,System.Boolean)">
            <summary>
            Adds the constraint to the engine processing pipeline.
            </summary>
            <param name="constraint">The constraint.</param>
            <param name="disableCollisionsBetweenLinkedBodies">if set to <c>true</c> [disable collisions between linked bodies].</param>
            <exception cref="T:System.Exception">Cannot perform this action when the physics engine is set to CollisionsOnly</exception>
        </member>
        <member name="M:Xenko.Physics.Simulation.RemoveConstraint(Xenko.Physics.Constraint)">
            <summary>
            Removes the constraint from the engine processing pipeline.
            </summary>
            <param name="constraint">The constraint.</param>
            <exception cref="T:System.Exception">Cannot perform this action when the physics engine is set to CollisionsOnly</exception>
        </member>
        <member name="M:Xenko.Physics.Simulation.Raycast(Xenko.Core.Mathematics.Vector3,Xenko.Core.Mathematics.Vector3)">
            <summary>
            Raycasts and stops at the first hit.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
        </member>
        <member name="M:Xenko.Physics.Simulation.Raycast(Xenko.Core.Mathematics.Vector3,Xenko.Core.Mathematics.Vector3,Xenko.Physics.CollisionFilterGroups,Xenko.Physics.CollisionFilterGroupFlags)">
            <summary>
            Raycasts and stops at the first hit.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="collisionFilterGroups">The collision group of this shape sweep</param>
            <param name="collisionFilterGroupFlags">The collision group that this shape sweep can collide with</param>
            <returns>The list with hit results.</returns>
        </member>
        <member name="M:Xenko.Physics.Simulation.RaycastPenetrating(Xenko.Core.Mathematics.Vector3,Xenko.Core.Mathematics.Vector3,System.Collections.Generic.IList{Xenko.Physics.HitResult})">
            <summary>
            Raycasts penetrating any shape the ray encounters.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="resultsOutput">The list to fill with results.</param>
        </member>
        <member name="M:Xenko.Physics.Simulation.RaycastPenetrating(Xenko.Core.Mathematics.Vector3,Xenko.Core.Mathematics.Vector3)">
            <summary>
            Raycasts penetrating any shape the ray encounters.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns>The list with hit results.</returns>
        </member>
        <member name="M:Xenko.Physics.Simulation.RaycastPenetrating(Xenko.Core.Mathematics.Vector3,Xenko.Core.Mathematics.Vector3,System.Collections.Generic.IList{Xenko.Physics.HitResult},Xenko.Physics.CollisionFilterGroups,Xenko.Physics.CollisionFilterGroupFlags)">
            <summary>
            Raycasts penetrating any shape the ray encounters.
            Filtering by CollisionGroup
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="resultsOutput">The list to fill with results.</param>
            <param name="collisionFilterGroups">The collision group of this shape sweep</param>
            <param name="collisionFilterGroupFlags">The collision group that this shape sweep can collide with</param>
        </member>
        <member name="M:Xenko.Physics.Simulation.RaycastPenetrating(Xenko.Core.Mathematics.Vector3,Xenko.Core.Mathematics.Vector3,Xenko.Physics.CollisionFilterGroups,Xenko.Physics.CollisionFilterGroupFlags)">
            <summary>
            Raycasts penetrating any shape the ray encounters.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="collisionFilterGroups">The collision group of this shape sweep</param>
            <param name="collisionFilterGroupFlags">The collision group that this shape sweep can collide with</param>
            <returns>The list with hit results.</returns>
        </member>
        <member name="M:Xenko.Physics.Simulation.ShapeSweep(Xenko.Physics.ColliderShape,Xenko.Core.Mathematics.Matrix,Xenko.Core.Mathematics.Matrix)">
            <summary>
            Performs a sweep test using a collider shape and stops at the first hit
            </summary>
            <param name="shape">The shape.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <exception cref="T:System.Exception">This kind of shape cannot be used for a ShapeSweep.</exception>
        </member>
        <member name="M:Xenko.Physics.Simulation.ShapeSweep(Xenko.Physics.ColliderShape,Xenko.Core.Mathematics.Matrix,Xenko.Core.Mathematics.Matrix,Xenko.Physics.CollisionFilterGroups,Xenko.Physics.CollisionFilterGroupFlags)">
            <summary>
            Performs a sweep test using a collider shape and stops at the first hit
            </summary>
            <param name="shape">The shape.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="collisionFilterGroups">The collision group of this shape sweep</param>
            <param name="collisionFilterGroupFlags">The collision group that this shape sweep can collide with</param>
            <returns></returns>
            <exception cref="T:System.Exception">This kind of shape cannot be used for a ShapeSweep.</exception>
        </member>
        <member name="M:Xenko.Physics.Simulation.ShapeSweepPenetrating(Xenko.Physics.ColliderShape,Xenko.Core.Mathematics.Matrix,Xenko.Core.Mathematics.Matrix,System.Collections.Generic.IList{Xenko.Physics.HitResult})">
            <summary>
            Performs a sweep test using a collider shape and never stops until "to"
            </summary>
            <param name="shape">The shape.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="resultsOutput">The list to fill with results.</param>
            <exception cref="T:System.Exception">This kind of shape cannot be used for a ShapeSweep.</exception>
        </member>
        <member name="M:Xenko.Physics.Simulation.ShapeSweepPenetrating(Xenko.Physics.ColliderShape,Xenko.Core.Mathematics.Matrix,Xenko.Core.Mathematics.Matrix)">
            <summary>
            Performs a sweep test using a collider shape and never stops until "to"
            </summary>
            <param name="shape">The shape.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns>The list with hit results.</returns>
            <exception cref="T:System.Exception">This kind of shape cannot be used for a ShapeSweep.</exception>
        </member>
        <member name="M:Xenko.Physics.Simulation.ShapeSweepPenetrating(Xenko.Physics.ColliderShape,Xenko.Core.Mathematics.Matrix,Xenko.Core.Mathematics.Matrix,System.Collections.Generic.IList{Xenko.Physics.HitResult},Xenko.Physics.CollisionFilterGroups,Xenko.Physics.CollisionFilterGroupFlags)">
            <summary>
            Performs a sweep test using a collider shape and never stops until "to"
            </summary>
            <param name="shape">The shape.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="resultsOutput">The list to fill with results.</param>
            <param name="collisionFilterGroups">The collision group of this shape sweep</param>
            <param name="collisionFilterGroupFlags">The collision group that this shape sweep can collide with</param>
            <exception cref="T:System.Exception">This kind of shape cannot be used for a ShapeSweep.</exception>
        </member>
        <member name="M:Xenko.Physics.Simulation.ShapeSweepPenetrating(Xenko.Physics.ColliderShape,Xenko.Core.Mathematics.Matrix,Xenko.Core.Mathematics.Matrix,Xenko.Physics.CollisionFilterGroups,Xenko.Physics.CollisionFilterGroupFlags)">
            <summary>
            Performs a sweep test using a collider shape and never stops until "to"
            </summary>
            <param name="shape">The shape.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="collisionFilterGroups">The collision group of this shape sweep</param>
            <param name="collisionFilterGroupFlags">The collision group that this shape sweep can collide with</param>
            <returns>The list with hit results.</returns>
            <exception cref="T:System.Exception">This kind of shape cannot be used for a ShapeSweep.</exception>
        </member>
        <member name="P:Xenko.Physics.Simulation.Gravity">
            <summary>
            Gets or sets the gravity.
            </summary>
            <value>
            The gravity.
            </value>
            <exception cref="T:System.Exception">
            Cannot perform this action when the physics engine is set to CollisionsOnly
            or
            Cannot perform this action when the physics engine is set to CollisionsOnly
            </exception>
        </member>
        <member name="P:Xenko.Physics.Simulation.MaxSubSteps">
            <summary>
            The maximum number of steps that the Simulation is allowed to take each tick.
            If the engine is running slow (large deltaTime), then you must increase the number of maxSubSteps to compensate for this, otherwise your simulation is “losing” time.
            It's important that frame DeltaTime is always less than MaxSubSteps*FixedTimeStep, otherwise you are losing time.
            </summary>
        </member>
        <member name="P:Xenko.Physics.Simulation.FixedTimeStep">
            <summary>
            By decreasing the size of fixedTimeStep, you are increasing the “resolution” of the simulation.
            Default is 1.0f / 60.0f or 60fps
            </summary>
        </member>
        <member name="E:Xenko.Physics.Simulation.SimulationBegin">
            <summary>
            Called right before the physics simulation.
            This event might not be fired by the main thread.
            </summary>
        </member>
        <member name="E:Xenko.Physics.Simulation.SimulationEnd">
            <summary>
            Called right after the physics simulation.
            This event might not be fired by the main thread.
            </summary>
        </member>
        <member name="P:Xenko.Engine.PhysicsComponent.ColliderShapes">
            <userdoc>
            The reference to the collider shape of this element.
            </userdoc>
        </member>
        <member name="P:Xenko.Engine.PhysicsComponent.CollisionGroup">
            <summary>
            Gets or sets the collision group.
            </summary>
            <value>
            The collision group.
            </value>
            <userdoc>
            Which collision group the component belongs to. This can't be changed at runtime. The default is DefaultFilter. 
            </userdoc>
            <remarks>
            The collider will still produce events, to allow non trigger rigidbodies or static colliders to act as a trigger if required for certain filtering groups.
            </remarks>
        </member>
        <member name="P:Xenko.Engine.PhysicsComponent.CanCollideWith">
            <summary>
            Gets or sets the can collide with.
            </summary>
            <value>
            The can collide with.
            </value>
            <userdoc>
            Which collider groups this component collides with. With nothing selected, it collides with all groups. This can't be changed at runtime.
            </userdoc>
            /// <remarks>
            The collider will still produce events, to allow non trigger rigidbodies or static colliders to act as a trigger if required for certain filtering groups.
            </remarks>
        </member>
        <member name="P:Xenko.Engine.PhysicsComponent.ProcessCollisions">
            <summary>
            Gets or sets if this element will store collisions
            </summary>
            <value>
            true, false
            </value>
            <userdoc>
            You can use collision events in scripts. If you have no scripts using collision events for this component, disable this option to save CPU. It has no effect on physics.
            </userdoc>
        </member>
        <member name="P:Xenko.Engine.PhysicsComponent.Enabled">
            <summary>
            Gets or sets if this element is enabled in the physics engine
            </summary>
            <value>
            true, false
            </value>
            <userdoc>
            If this element is enabled in the physics engine
            </userdoc>
        </member>
        <member name="P:Xenko.Engine.PhysicsComponent.CanSleep">
            <summary>
            Gets or sets if this element can enter sleep state
            </summary>
            <value>
            true, false
            </value>
            <userdoc>
            Don't process this physics component when it's not moving. This saves CPU.
            </userdoc>
        </member>
        <member name="P:Xenko.Engine.PhysicsComponent.IsActive">
            <summary>
            Gets a value indicating whether this instance is active (awake).
            </summary>
            <value>
              <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Xenko.Engine.PhysicsComponent.Activate(System.Boolean)">
            <summary>
            Attempts to awake the collider.
            </summary>
            <param name="forceActivation">if set to <c>true</c> [force activation].</param>
        </member>
        <member name="P:Xenko.Engine.PhysicsComponent.Restitution">
            <summary>
            Gets or sets if this element restitution
            </summary>
            <value>
            true, false
            </value>
            <userdoc>
            The amount of kinetic energy lost or gained after a collision. If the restitution of colliding entities is 0, the entities lose all energy and stop moving immediately on impact. If the restitution is 1, they lose no energy and rebound with the same velocity they collided at. Use this to change the component "bounciness". A typical value is between 0 and 1.
            </userdoc>
        </member>
        <member name="P:Xenko.Engine.PhysicsComponent.Friction">
            <summary>
            Gets or sets the friction of this element
            </summary>
            <value>
            true, false
            </value>
            <userdoc>
            The friction
            </userdoc>
            <remarks>
            It's importantant to realise that friction and restitution are not values of any particular surface, but rather a value of the interaction of two surfaces. 
            So why is it defined for each object? In order to determine the overall friction and restitution between any two surfaces in a collision.
            </remarks>
        </member>
        <member name="P:Xenko.Engine.PhysicsComponent.RollingFriction">
            <summary>
            Gets or sets the rolling friction of this element
            </summary>
            <value>
            true, false
            </value>
            <userdoc>
            The rolling friction
            </userdoc>
        </member>
        <member name="P:Xenko.Engine.PhysicsComponent.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
            <value>
            The tag.
            </value>
        </member>
        <member name="M:Xenko.Engine.PhysicsComponent.DerivePhysicsTransformation(Xenko.Core.Mathematics.Matrix@)">
            <summary>
            Computes the physics transformation from the TransformComponent values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xenko.Engine.PhysicsComponent.DeriveBonePhysicsTransformation(Xenko.Core.Mathematics.Matrix@)">
            <summary>
            Computes the physics transformation from the TransformComponent values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xenko.Engine.PhysicsComponent.UpdateTransformationComponent(Xenko.Core.Mathematics.Matrix@)">
            <summary>
            Updades the graphics transformation from the given physics transformation
            </summary>
            <param name="physicsTransform"></param>
        </member>
        <member name="M:Xenko.Engine.PhysicsComponent.UpdateBoneTransformation(Xenko.Core.Mathematics.Matrix@)">
            <summary>
            Updades the graphics transformation from the given physics transformation
            </summary>
            <param name="physicsTransform"></param>
        </member>
        <member name="M:Xenko.Engine.PhysicsComponent.UpdatePhysicsTransformation">
            <summary>
            Forces an update from the TransformComponent to the Collider.PhysicsWorldTransform.
            Useful to manually force movements.
            In the case of dynamic rigidbodies a velocity reset should be applied first.
            </summary>
        </member>
        <member name="T:Xenko.XenkoVersion">
            <summary>
            Internal version used to identify Xenko version.
            </summary>
            <remarks>
            Note: Xenko.xkpkg and PublicVersion versions should match.
            Also, during package build, PackageUpdateVersionTask is updating that file and expect some specific text regex so be careful if you change any of this.
            </remarks>
        </member>
        <member name="F:Xenko.XenkoVersion.PublicVersion">
            <summary>
            The version used by editor for display purpose. 4th digit needs to be at least 1 if used (due to NuGet special cases).
            </summary>
        </member>
        <member name="F:Xenko.XenkoVersion.AssemblyVersion">
            <summary>
            The current assembly version as text, currently same as <see cref="F:Xenko.XenkoVersion.PublicVersion"/>.
            </summary>
        </member>
        <member name="F:Xenko.XenkoVersion.NuGetVersionSimple">
            <summary>
            The NuGet package version without special tags.
            </summary>
        </member>
        <member name="F:Xenko.XenkoVersion.NuGetVersion">
            <summary>
            The NuGet package version.
            </summary>
        </member>
        <member name="F:Xenko.XenkoVersion.NuGetVersionSuffix">
            <summary>
            The NuGet package suffix (i.e. -beta01). Note: might be replaced during package build.
            </summary>
        </member>
        <member name="F:Xenko.XenkoVersion.AssemblyInformationalVersion">
            <summary>
            The informational assembly version, containing -dev or -g[git_hash] during package.
            </summary>
        </member>
        <member name="F:Xenko.XenkoVersion.AssemblyInformationalSuffix">
            <summary>
            The assembly suffix. Note: replaced by git commit during package build.
            </summary>
        </member>
    </members>
</doc>
