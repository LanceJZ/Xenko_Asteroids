// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
namespace SiliconStudio.Xenko.Rendering.Shadows
{
    /// <summary>
    /// Selects the shadow map and computes the shadow factor.
    /// </summary>
    /// <remarks>
    /// TCascadeCount: Number of cascades.
    /// TCascadeDebug: Flag to enable debug mode (1 color per cascade).
    /// </remarks>
    internal shader ShadowMapReceiverDirectional<int TCascadeCount, int TLightCount, bool TBlendCascades, bool TDepthRangeAuto, bool TCascadeDebug> : ShadowMapReceiverBase<PerView.Lighting, TCascadeCount, TLightCount>
    {
        cbuffer PerView.Lighting // TODO: Use a proper cbuffer for this?
        {
            float CascadeDepthSplits[TCascadeCount * TLightCount];
        };

        override void ComputeShadow(int lightIndex)
        {
            base.ComputeShadow(lightIndex);

            int cascadeIndexBase = lightIndex * TCascadeCount;

            // Only support a single light per group
            int cascadeIndex = 0;
            [unroll] 
            for(int i = 0; i < TCascadeCount - 1; i++) 
            {
                [flatten]
                if (streams.DepthVS > CascadeDepthSplits[cascadeIndexBase + i])
                {
                    cascadeIndex = i + 1;
                }
            }

            float shadow = 1.0;

            // Offset the shadow position
            float3 shadowPosition = streams.PositionWS.xyz;
            shadowPosition += GetShadowPositionOffset(OffsetScales[lightIndex], streams.NdotL, streams.normalWS);

            // If we are within the cascades
            if (cascadeIndex < TCascadeCount)
            {
                shadow = ComputeShadowFromCascade(shadowPosition, cascadeIndex, lightIndex);

                float nextSplit = CascadeDepthSplits[cascadeIndexBase + cascadeIndex];
                float splitSize = cascadeIndex == 0 ? nextSplit : nextSplit - CascadeDepthSplits[cascadeIndexBase + cascadeIndex - 1];
                float splitDist = (nextSplit - streams.DepthVS) / splitSize;
                float lerpAmt = smoothstep(0.0f, 1.0f, splitDist);

                if (cascadeIndex == TCascadeCount - 1)
                {
                    if (!TDepthRangeAuto)
                    {
                        shadow = lerp(1.0f, shadow, lerpAmt);
                    }
                }
                else if (TBlendCascades)
                {
                    float nextShadow = ComputeShadowFromCascade(shadowPosition, cascadeIndex + 1, lightIndex);
                    shadow = lerp(nextShadow, shadow, lerpAmt);
                }
            }

            // Output the shadow color
            if (TCascadeDebug)
            {
                //// Display Cascade with colors in debug mode
                ////                                   GREEN          BLUE           PURPLE         RED            WHITE           
                static const float3 colors[5] = { float3(0,1,0), float3(0,0,1), float3(1,0,1), float3(1,0,0), float3(1,1,1)};
                streams.shadowColor = colors[cascadeIndex] * shadow;
            }
            else
            {
                streams.shadowColor = shadow;
            }
        }
    };
}