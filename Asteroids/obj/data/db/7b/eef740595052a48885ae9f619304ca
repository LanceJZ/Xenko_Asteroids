// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
namespace SiliconStudio.Xenko.Rendering.Lights
{
    /// <summary>
    /// Defines a group of spot lights in clustered shading.
    /// </summary>
    shader LightClusteredSpotGroup<int ClusterSize> : DirectLightGroup, LightClustered<ClusterSize>, LightSpot
    {
        rgroup PerView.Lighting
        {
            stage Buffer<float4> SpotLights;
        }

        override int GetMaxLightCount()
        {
            return streams.lightData.y >> 16;
        }

        override int GetLightCount()
        {
            return streams.lightData.y >> 16;
        }

        /// <summary>
        /// Compute the light color/direction for the specified index within this group
        /// </summary>
        override void PrepareDirectLightCore(int lightIndexIgnored)
        {
            // What we had so far was just a loop index
            // Note: we have lightIndex as a parameter but we ignore it since we want to preserve it between point and spot lights
            int realLightIndex = LightIndices.Load(streams.lightIndex);
            streams.lightIndex++;

            // Build SpotLightData
            SpotLightDataInternal spotLight;
            float4 spotLight1 = SpotLights.Load(realLightIndex * 4);
            float4 spotLight2 = SpotLights.Load(realLightIndex * 4 + 1);
            float4 spotLight3 = SpotLights.Load(realLightIndex * 4 + 2);
            float4 spotLight4 = SpotLights.Load(realLightIndex * 4 + 3);
            spotLight.PositionWS = spotLight1.xyz;
            spotLight.DirectionWS = spotLight2.xyz;
            spotLight.AngleOffsetAndInvSquareRadius = spotLight3.xyz;
            spotLight.Color = spotLight4.xyz;

            // Perform lighting
            ProcessLight(spotLight);
        }
    };
}