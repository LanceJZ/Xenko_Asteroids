// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.

namespace SiliconStudio.Xenko.Rendering.Skyboxes
{
    /// <summary>
    /// Base shader to sample an environment
    /// </summary>
    shader SphericalHarmonicsEnvironmentColor<int TOrder> : IComputeEnvironmentColor
    {
        cbuffer PerView.Lighting
        {
            [Color]
            float3 SphericalColors[TOrder * TOrder];
        }

        override float4 Compute(float3 direction)
        {
            var x = direction.x;
            var y = direction.y;
            var z = direction.z;

            var x2 = x*x;
            var y2 = y*y;
            var z2 = z*z;

            float3 color = SphericalColors[0];

if(TOrder>1)
{
            color += SphericalColors[1]*y;
            color += SphericalColors[2]*z;
            color += SphericalColors[3]*x;
                
if(TOrder>2)
{
            color += SphericalColors[4]*y*x;
            color += SphericalColors[5]*y*z;
            color += SphericalColors[6]*(3.0*z2-1.0);
            color += SphericalColors[7]*x*z;
            color += SphericalColors[8]*(x2-y2);
                    
if(TOrder>3)
{                 
            var z3 = z2 * z;

            var x4 = x2 * x2;
            var y4 = y2 * y2;
            var z4 = z2 * z2;

            color += SphericalColors[9]*y*(3*x2-y2);
            color += SphericalColors[10]*y*x*z;
            color += SphericalColors[11]*y*(-1.0+5.0*z2);
            color += SphericalColors[12]*(5.0*z3-3.0*z);
            color += SphericalColors[13]*x*(-1.0+5.0*z2);
            color += SphericalColors[14]*(x2-y2)*z;
            color += SphericalColors[15]*x*(x2-3.0*y2);
                        
if(TOrder>4)
{
            color += SphericalColors[16]*x*y*(x2-y2);
            color += SphericalColors[17]*y*z*(3.0*x2-y2);
            color += SphericalColors[18]*y*x*(-1.0+7.0*z2);
            color += SphericalColors[19]*y*z*(-3.0+7.0*z2);
            color += SphericalColors[20]*(105.0*z4-90.0*z2+9.0);
            color += SphericalColors[21]*x*z*(-3.0+7.0*z2);
            color += SphericalColors[22]*(x2-y2)*(-1.0+7.0*z2);
            color += SphericalColors[23]*x*z*(x2-3.0*y2);
            color += SphericalColors[24]*(x4-6.0*y2*x2+y4);
}}}}
            return float4(color, 1);
        }
    };
}
