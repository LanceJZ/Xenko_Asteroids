// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
namespace SiliconStudio.Xenko.Rendering.Materials
{
    /// <summary>
    /// Performs the shading of a material according to the lights
    /// </summary>
    shader MaterialSurfaceLightingAndShading : IMaterialSurfacePixel, DirectLightGroupArray, EnvironmentLightArray, MaterialPixelShadingStream, Math, Transformation
    {
        compose IMaterialSurfaceShading surfaces[];

        override void Compute()
        {
            // Before performing the shading for all lights, update the NormalVS with the latest normal
            // In case normal mapping is not used, this is a no-op
            UpdateNormalFromTangentSpace(streams.matNormal);

            // Make sure that light stream is reset
            ResetLightStream();

            // Prepare the material for lighting (allow to pre-compute some attributes based on other attributes)
            PrepareMaterialForLightingAndShading();

            // ---------------------------------------------------------------------------
            // Compute Direct Lighting contribution
            // ---------------------------------------------------------------------------
            float3 directLightingContribution = 0;
            foreach(var lightGroup in directLightGroups)
            {
                lightGroup.PrepareDirectLights();

                const int maxLightCount = lightGroup.GetMaxLightCount();
                int count = lightGroup.GetLightCount();
                
                // [unroll] Don't unroll and let the driver handle it
                for(int i = 0; i < maxLightCount; i++)
                {
                    if (i >= count)
                    {
                        break;
                    }

                    // Compute the light color and direction
                    lightGroup.PrepareDirectLight(i);

                    // Compute common material shading streams (TODO: This is temporary)
                    PrepareMaterialPerDirectLight();

                    // Iterate on shading models
                    foreach(var surface in surfaces)
                    {
                        directLightingContribution += surface.ComputeDirectLightContribution();
                    }
                }
            }

            // ---------------------------------------------------------------------------
            // Compute Environment Lighting contribution
            // ---------------------------------------------------------------------------
            float3 environmentLightingContribution = 0;
            foreach(var environmentLight in environmentLights)
            {
                // Compute the environment light color (streams.lightColor)
                environmentLight.PrepareEnvironmentLight();

                // Iterate on shading models
                foreach(var surface in surfaces)
                {
                    environmentLightingContribution += surface.ComputeEnvironmentLightContribution();
                }
            }

            // Add Direct (*PI over hemisphere) and Environment Lighting
            streams.shadingColor += directLightingContribution * PI + environmentLightingContribution;
            streams.shadingColorAlpha = streams.matDiffuse.a;
        }
    };
}