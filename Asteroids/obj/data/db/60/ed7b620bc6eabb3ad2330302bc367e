// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
namespace SiliconStudio.Xenko.Rendering.Lights
{
    /// <summary>
    /// Defines a group of point lights in clustered shading.
    /// </summary>
    shader LightClusteredPointGroup<int ClusterSize> : DirectLightGroup, LightClustered<ClusterSize>, LightPoint
    {
        rgroup PerView.Lighting
        {
            stage Buffer<float4> PointLights;
        }

        override void PrepareDirectLights()
        {
            PrepareLightData();
        }

        override int GetMaxLightCount()
        {
            return streams.lightData.y & 0xFFFF;
        }

        override int GetLightCount()
        {
            return streams.lightData.y & 0xFFFF;
        }

        /// <summary>
        /// Compute the light color/direction for the specified index within this group
        /// </summary>
        override void PrepareDirectLightCore(int lightIndexIgnored)
        {
            // What we had so far was just a loop index
            // Note: we have lightIndex as a parameter but we ignore it since we want to preserve it between point and spot lights
            int realLightIndex = LightIndices.Load(streams.lightIndex);
            streams.lightIndex++;

            // Build PointLightData
            PointLightDataInternal pointLight;
            float4 pointLight1 = PointLights.Load(realLightIndex * 2);
            float4 pointLight2 = PointLights.Load(realLightIndex * 2 + 1);
            pointLight.PositionWS = pointLight1.xyz;
            pointLight.InvSquareRadius = pointLight1.w;
            pointLight.Color = pointLight2.xyz;

            // Perform lighting
            ProcessLight(pointLight);
        }
    };
}