// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
namespace SiliconStudio.Xenko.Rendering.Materials
{
    /// <summary>
    /// Material normal map
    /// </summary>
    shader MaterialSurfaceNormalMap<bool TIsNormalXY1, bool TScaleAndBias> : IMaterialSurfacePixel
    {
        compose ComputeColor normalMap;

        override void Compute()
        {
            var normal = normalMap.Compute();

            // TODO: This switch on z == 0 is not optimal as it is performed at runtime
            // TODO: We should try to store texture with pre-optimized normal maps encoded in RG for all normal maps instead of handling the case here.
            if (normal.z == 0)
            {
                // Automatically use xy when z is null (in case of BC5 Normal compression)
                streams.matNormal = float3(normal.xy, 1);
            }
            else
            {
                if (TScaleAndBias)
                {
                    normal = (2.0f * normal) - 1.0f;
                }

                if (TIsNormalXY1)
                {
                    // Explicitly use only xy
                    streams.matNormal = float3(normal.xy, 1);
                }
                else
                {
                    // Texture has full xyz components 
                    streams.matNormal = normal.xyz;
                }
            }
            // Normalize after sampling it
            //streams.matNormal = normalize(streams.matNormal);
        }
    };
}